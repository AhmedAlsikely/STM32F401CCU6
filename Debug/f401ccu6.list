
f401ccu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046cc  080046cc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d4  080046d4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080046dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000007c  08004758  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004758  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a742  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002212  00000000  00000000  0002a7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ba2  00000000  00000000  0002dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6f0  00000000  00000000  0004476a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000862e0  00000000  00000000  00050e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d713a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b8  00000000  00000000  000d718c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800424c 	.word	0x0800424c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800424c 	.word	0x0800424c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <BL_UART_Featch_Host_Command>:
/*---------------------- Section : Functions Definitions ------- */
/**
 * 
 * @return 
 */
BL_Status BL_UART_Featch_Host_Command(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	BL_Status Status = BL_NACK;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_Length = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	717b      	strb	r3, [r7, #5]


	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RC_LENGTH);
 8000596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800059a:	2100      	movs	r1, #0
 800059c:	4859      	ldr	r0, [pc, #356]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 800059e:	f003 f9df 	bl	8003960 <memset>
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	2201      	movs	r2, #1
 80005a8:	4956      	ldr	r1, [pc, #344]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 80005aa:	4857      	ldr	r0, [pc, #348]	; (8000708 <BL_UART_Featch_Host_Command+0x184>)
 80005ac:	f002 fe2a 	bl	8003204 <HAL_UART_Receive>
 80005b0:	4603      	mov	r3, r0
 80005b2:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != HAL_Status)
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <BL_UART_Featch_Host_Command+0x3c>
	{
		Status = BL_NACK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	e09c      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
	}
	else
	{
		Data_Length = BL_Host_Buffer[0];
 80005c0:	4b50      	ldr	r3, [pc, #320]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	717b      	strb	r3, [r7, #5]
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART,  &BL_Host_Buffer[1], Data_Length, HAL_MAX_DELAY);
 80005c6:	797b      	ldrb	r3, [r7, #5]
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	494f      	ldr	r1, [pc, #316]	; (800070c <BL_UART_Featch_Host_Command+0x188>)
 80005d0:	484d      	ldr	r0, [pc, #308]	; (8000708 <BL_UART_Featch_Host_Command+0x184>)
 80005d2:	f002 fe17 	bl	8003204 <HAL_UART_Receive>
 80005d6:	4603      	mov	r3, r0
 80005d8:	71bb      	strb	r3, [r7, #6]
		if(HAL_OK != HAL_Status)
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <BL_UART_Featch_Host_Command+0x62>
		{
			Status = BL_NACK;
 80005e0:	2300      	movs	r3, #0
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	e089      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
		}
		else
		{
			switch(BL_Host_Buffer[1])
 80005e6:	4b47      	ldr	r3, [pc, #284]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 80005e8:	785b      	ldrb	r3, [r3, #1]
 80005ea:	3b10      	subs	r3, #16
 80005ec:	2b11      	cmp	r3, #17
 80005ee:	d87e      	bhi.n	80006ee <BL_UART_Featch_Host_Command+0x16a>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <BL_UART_Featch_Host_Command+0x74>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000641 	.word	0x08000641
 80005fc:	0800064d 	.word	0x0800064d
 8000600:	08000659 	.word	0x08000659
 8000604:	08000665 	.word	0x08000665
 8000608:	08000671 	.word	0x08000671
 800060c:	0800067d 	.word	0x0800067d
 8000610:	08000689 	.word	0x08000689
 8000614:	08000695 	.word	0x08000695
 8000618:	080006a7 	.word	0x080006a7
 800061c:	080006b9 	.word	0x080006b9
 8000620:	080006ef 	.word	0x080006ef
 8000624:	080006ef 	.word	0x080006ef
 8000628:	080006ef 	.word	0x080006ef
 800062c:	080006ef 	.word	0x080006ef
 8000630:	080006ef 	.word	0x080006ef
 8000634:	080006ef 	.word	0x080006ef
 8000638:	080006cb 	.word	0x080006cb
 800063c:	080006dd 	.word	0x080006dd
			{
				case CBL_GET_VER_CMD:
					Bootloader_Get_Version(BL_Host_Buffer);
 8000640:	4830      	ldr	r0, [pc, #192]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 8000642:	f000 f94d 	bl	80008e0 <Bootloader_Get_Version>
					Status = BL_OK;
 8000646:	2301      	movs	r3, #1
 8000648:	71fb      	strb	r3, [r7, #7]
					break;
 800064a:	e056      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_GET_HELP_CMD:
					//BL_print_message("Read the commands supported by the bootloader \r\n");
					Bootloader_Get_Help(BL_Host_Buffer);
 800064c:	482d      	ldr	r0, [pc, #180]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 800064e:	f000 f98d 	bl	800096c <Bootloader_Get_Help>
					Status = BL_OK;
 8000652:	2301      	movs	r3, #1
 8000654:	71fb      	strb	r3, [r7, #7]
					break;
 8000656:	e050      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_GET_CID_CMD:

					//BL_print_message("Read the MCU chip identification number \r\n");
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8000658:	482a      	ldr	r0, [pc, #168]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 800065a:	f000 f9c7 	bl	80009ec <Bootloader_Get_Chip_Identification_Number>
					Status = BL_OK;
 800065e:	2301      	movs	r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]
					break;
 8000662:	e04a      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_GET_RDP_STATUS_CMD:

					//BL_print_message("Read the FLASH Read Protection level \r\n");
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 8000664:	4827      	ldr	r0, [pc, #156]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 8000666:	f000 fa0d 	bl	8000a84 <Bootloader_Read_Protection_Level>
					Status = BL_OK;
 800066a:	2301      	movs	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
					break;
 800066e:	e044      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_GO_TO_ADDR_CMD:

					//BL_print_message("Jump bootloader to specified address \r\n");
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 8000670:	4824      	ldr	r0, [pc, #144]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 8000672:	f000 fa4d 	bl	8000b10 <Bootloader_Jump_To_Address>
					Status = BL_OK;
 8000676:	2301      	movs	r3, #1
 8000678:	71fb      	strb	r3, [r7, #7]
					break;
 800067a:	e03e      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_FLASH_ERASE_CMD:

					//BL_print_message("Mass erase or sector erase of the user flash \r\n");
					Bootloader_Erase_Flash(BL_Host_Buffer);
 800067c:	4821      	ldr	r0, [pc, #132]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 800067e:	f000 fab5 	bl	8000bec <Bootloader_Erase_Flash>
					Status = BL_OK;
 8000682:	2301      	movs	r3, #1
 8000684:	71fb      	strb	r3, [r7, #7]
					break;
 8000686:	e038      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_MEM_WRITE_CMD:

					//BL_print_message("Write data into different memories of the MCU \r\n");
					Bootloader_Memory_Write(BL_Host_Buffer);
 8000688:	481e      	ldr	r0, [pc, #120]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 800068a:	f000 fb21 	bl	8000cd0 <Bootloader_Memory_Write>
					Status = BL_OK;
 800068e:	2301      	movs	r3, #1
 8000690:	71fb      	strb	r3, [r7, #7]
					break;
 8000692:	e032      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_EN_R_W_PROTECT_CMD:

					BL_print_message("Enable read/write protect on different sectors of the user flash \r\n");
 8000694:	481e      	ldr	r0, [pc, #120]	; (8000710 <BL_UART_Featch_Host_Command+0x18c>)
 8000696:	f000 fcad 	bl	8000ff4 <BL_print_message>
					Bootloader_Enable_RW_Protection(BL_Host_Buffer);
 800069a:	481a      	ldr	r0, [pc, #104]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 800069c:	f000 fb9e 	bl	8000ddc <Bootloader_Enable_RW_Protection>
					Status = BL_OK;
 80006a0:	2301      	movs	r3, #1
 80006a2:	71fb      	strb	r3, [r7, #7]
					break;
 80006a4:	e029      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_MEM_READ_CMD:

					BL_print_message("Read data from different memories of the microcontroller \r\n");
 80006a6:	481b      	ldr	r0, [pc, #108]	; (8000714 <BL_UART_Featch_Host_Command+0x190>)
 80006a8:	f000 fca4 	bl	8000ff4 <BL_print_message>
					Bootloader_Memory_Read(BL_Host_Buffer);
 80006ac:	4815      	ldr	r0, [pc, #84]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 80006ae:	f000 fb9f 	bl	8000df0 <Bootloader_Memory_Read>
					Status = BL_OK;
 80006b2:	2301      	movs	r3, #1
 80006b4:	71fb      	strb	r3, [r7, #7]
					break;
 80006b6:	e020      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_READ_SECTOR_STATUS_CMD:

					BL_print_message("Read all the sector protection status \r\n");
 80006b8:	4817      	ldr	r0, [pc, #92]	; (8000718 <BL_UART_Featch_Host_Command+0x194>)
 80006ba:	f000 fc9b 	bl	8000ff4 <BL_print_message>
					Bootloader_Get_Sector_Protection_Status(BL_Host_Buffer);
 80006be:	4811      	ldr	r0, [pc, #68]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 80006c0:	f000 fba0 	bl	8000e04 <Bootloader_Get_Sector_Protection_Status>
					Status = BL_OK;
 80006c4:	2301      	movs	r3, #1
 80006c6:	71fb      	strb	r3, [r7, #7]
					break;
 80006c8:	e017      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_OTP_READ_CMD:

					BL_print_message("Read the OTP contents \r\n");
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <BL_UART_Featch_Host_Command+0x198>)
 80006cc:	f000 fc92 	bl	8000ff4 <BL_print_message>
					Bootloader_Read_OTP(BL_Host_Buffer);
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 80006d2:	f000 fba1 	bl	8000e18 <Bootloader_Read_OTP>
					Status = BL_OK;
 80006d6:	2301      	movs	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
					break;
 80006da:	e00e      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				case CBL_DIS_R_W_PROTECT_CMD:

					BL_print_message("Disable read/write protection on different sectors of the user flash \r\n");
 80006dc:	4810      	ldr	r0, [pc, #64]	; (8000720 <BL_UART_Featch_Host_Command+0x19c>)
 80006de:	f000 fc89 	bl	8000ff4 <BL_print_message>
					Bootloader_Disable_RW_Protection(BL_Host_Buffer);
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <BL_UART_Featch_Host_Command+0x180>)
 80006e4:	f000 fba2 	bl	8000e2c <Bootloader_Disable_RW_Protection>
					Status = BL_OK;
 80006e8:	2301      	movs	r3, #1
 80006ea:	71fb      	strb	r3, [r7, #7]
					break;
 80006ec:	e005      	b.n	80006fa <BL_UART_Featch_Host_Command+0x176>
				default:
					BL_print_message("Invaild command code received from host !! \r\n");
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <BL_UART_Featch_Host_Command+0x1a0>)
 80006f0:	f000 fc80 	bl	8000ff4 <BL_print_message>
					Status = BL_NACK;
 80006f4:	2300      	movs	r3, #0
 80006f6:	71fb      	strb	r3, [r7, #7]
					break;
 80006f8:	bf00      	nop
			}
		}
	}

	return Status;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000098 	.word	0x20000098
 8000708:	200001e8 	.word	0x200001e8
 800070c:	20000099 	.word	0x20000099
 8000710:	08004264 	.word	0x08004264
 8000714:	080042a8 	.word	0x080042a8
 8000718:	080042e4 	.word	0x080042e4
 800071c:	08004310 	.word	0x08004310
 8000720:	0800432c 	.word	0x0800432c
 8000724:	08004374 	.word	0x08004374

08000728 <Bootloader_Jump_to_user_app>:

/**
 * 
 */
static void Bootloader_Jump_to_user_app(void){
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application */
	uint32_t MSP_Value = *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS);
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <Bootloader_Jump_to_user_app+0x50>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	60fb      	str	r3, [r7, #12]
	/* Reset Handler definition function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4));
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <Bootloader_Jump_to_user_app+0x54>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60bb      	str	r3, [r7, #8]

	pMainApp ResetHandler_Address = (pMainApp)MainAppAddr;
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	607b      	str	r3, [r7, #4]



	/* DeInitialize of modules */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 800073e:	f002 fb85 	bl	8002e4c <HAL_RCC_DeInit>
	HAL_GPIO_DeInit(LED_ALSIKELY_GPIO_Port, LED_ALSIKELY_Pin);
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000746:	480e      	ldr	r0, [pc, #56]	; (8000780 <Bootloader_Jump_to_user_app+0x58>)
 8000748:	f001 fe2a 	bl	80023a0 <HAL_GPIO_DeInit>
	HAL_CRC_DeInit(BL_CRC_ENABLE_OBJ);
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <Bootloader_Jump_to_user_app+0x5c>)
 800074e:	f001 f8f0 	bl	8001932 <HAL_CRC_DeInit>
	HAL_UART_DeInit(BL_DEBUG_UART);
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <Bootloader_Jump_to_user_app+0x60>)
 8000754:	f002 fc95 	bl	8003082 <HAL_UART_DeInit>
	HAL_UART_DeInit(BL_HOST_COMMUNICATION_UART);
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <Bootloader_Jump_to_user_app+0x64>)
 800075a:	f002 fc92 	bl	8003082 <HAL_UART_DeInit>
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	f383 8808 	msr	MSP, r3
}
 8000768:	bf00      	nop

	/* Set Main Stack Pointer */
	__set_MSP(MSP_Value);
	/* Jump to Application Reset Handler*/
	ResetHandler_Address();
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4798      	blx	r3
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	0800c000 	.word	0x0800c000
 800077c:	0800c004 	.word	0x0800c004
 8000780:	40020800 	.word	0x40020800
 8000784:	20000198 	.word	0x20000198
 8000788:	200001a4 	.word	0x200001a4
 800078c:	200001e8 	.word	0x200001e8

08000790 <Host_Address_Verification>:
/**
 * 
 * @param Jump_Address
 * @return 
 */
static uint8_t Host_Address_Verification(uint32_t Jump_Address){
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401_FLASH_END)){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80007a2:	d306      	bcc.n	80007b2 <Host_Address_Verification+0x22>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <Host_Address_Verification+0x4c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d802      	bhi.n	80007b2 <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 80007ac:	2301      	movs	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	e00c      	b.n	80007cc <Host_Address_Verification+0x3c>
	}else if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F401_SRAM1_END)){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007b8:	d306      	bcc.n	80007c8 <Host_Address_Verification+0x38>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <Host_Address_Verification+0x50>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d802      	bhi.n	80007c8 <Host_Address_Verification+0x38>
		Address_Verification = ADDRESS_IS_VALID;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	e001      	b.n	80007cc <Host_Address_Verification+0x3c>
	}else{
		Address_Verification = ADDRESS_IS_INVALID;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	08040000 	.word	0x08040000
 80007e0:	20010000 	.word	0x20010000

080007e4 <Bootloader_CRC_Verify>:
 * @param pData
 * @param Data_len
 * @param Host_CRC
 * @return 
 */
static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_len, uint32_t Host_CRC){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 80007f0:	2300      	movs	r3, #0
 80007f2:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculate = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]

	for(Data_Counter = 0; Data_Counter < Data_len; Data_Counter++){
 8000800:	2300      	movs	r3, #0
 8000802:	75fb      	strb	r3, [r7, #23]
 8000804:	e00f      	b.n	8000826 <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 8000806:	7dfb      	ldrb	r3, [r7, #23]
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculate = HAL_CRC_Accumulate(BL_CRC_ENABLE_OBJ, &Data_Buffer, 1);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	2201      	movs	r2, #1
 8000816:	4619      	mov	r1, r3
 8000818:	4810      	ldr	r0, [pc, #64]	; (800085c <Bootloader_CRC_Verify+0x78>)
 800081a:	f001 f8ba 	bl	8001992 <HAL_CRC_Accumulate>
 800081e:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_len; Data_Counter++){
 8000820:	7dfb      	ldrb	r3, [r7, #23]
 8000822:	3301      	adds	r3, #1
 8000824:	75fb      	strb	r3, [r7, #23]
 8000826:	7dfb      	ldrb	r3, [r7, #23]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	429a      	cmp	r2, r3
 800082c:	d8eb      	bhi.n	8000806 <Bootloader_CRC_Verify+0x22>
	}

	__HAL_CRC_DR_RESET(BL_CRC_ENABLE_OBJ);
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <Bootloader_CRC_Verify+0x78>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <Bootloader_CRC_Verify+0x78>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f042 0201 	orr.w	r2, r2, #1
 800083c:	609a      	str	r2, [r3, #8]

	if(MCU_CRC_Calculate == Host_CRC){
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	429a      	cmp	r2, r3
 8000844:	d102      	bne.n	800084c <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 8000846:	2301      	movs	r3, #1
 8000848:	77fb      	strb	r3, [r7, #31]
 800084a:	e001      	b.n	8000850 <Bootloader_CRC_Verify+0x6c>
	}else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 800084c:	2300      	movs	r3, #0
 800084e:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 8000850:	7ffb      	ldrb	r3, [r7, #31]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000198 	.word	0x20000198

08000860 <Bootloader_Send_ACK>:

/**
 * 
 * @param Replay_len
 */
static void Bootloader_Send_ACK(uint8_t Replay_len){
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	uint8_t ACK_Value[2]={0};
 800086a:	2300      	movs	r3, #0
 800086c:	81bb      	strh	r3, [r7, #12]
	ACK_Value[0] = CBL_SEND_ACK;
 800086e:	23cd      	movs	r3, #205	; 0xcd
 8000870:	733b      	strb	r3, [r7, #12]
	ACK_Value[1] = Replay_len;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, (uint8_t *)ACK_Value, 2, HAL_MAX_DELAY);
 8000876:	f107 010c 	add.w	r1, r7, #12
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	2202      	movs	r2, #2
 8000880:	4803      	ldr	r0, [pc, #12]	; (8000890 <Bootloader_Send_ACK+0x30>)
 8000882:	f002 fc2d 	bl	80030e0 <HAL_UART_Transmit>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200001e8 	.word	0x200001e8

08000894 <Bootloader_Send_NACK>:

/**
 * 
 */
static void Bootloader_Send_NACK(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	uint8_t NACK_Value = CBL_SEND_NACK;
 800089a:	23ab      	movs	r3, #171	; 0xab
 800089c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &NACK_Value, 1, HAL_MAX_DELAY);
 800089e:	1df9      	adds	r1, r7, #7
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	2201      	movs	r2, #1
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <Bootloader_Send_NACK+0x20>)
 80008a8:	f002 fc1a 	bl	80030e0 <HAL_UART_Transmit>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200001e8 	.word	0x200001e8

080008b8 <Bootloader_Send_Data_To_Host>:
/**
 * 
 * @param Host_Buffer
 * @param Data_len
 */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_len){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, (uint8_t *)Host_Buffer, Data_len, HAL_MAX_DELAY);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <Bootloader_Send_Data_To_Host+0x24>)
 80008ce:	f002 fc07 	bl	80030e0 <HAL_UART_Transmit>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001e8 	.word	0x200001e8

080008e0 <Bootloader_Get_Version>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Get_Version(uint8_t *Host_Buffer){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	uint8_t BL_Version[4] = {CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <Bootloader_Get_Version+0x7c>)
 80008ea:	60bb      	str	r3, [r7, #8]
	uint16_t Host_CMD_Packet_Len = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
	uint8_t CRC_Verify  = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]

	Bootloader_Jump_to_user_app();
 80008f8:	f7ff ff16 	bl	8000728 <Bootloader_Jump_to_user_app>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Read the bootloader version from the MCU \r\n");
 80008fc:	4818      	ldr	r0, [pc, #96]	; (8000960 <Bootloader_Get_Version+0x80>)
 80008fe:	f000 fb79 	bl	8000ff4 <BL_print_message>
#endif
	/* Extract the CRC32 and Packet length send by the Host */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b29b      	uxth	r3, r3
 8000908:	3301      	adds	r3, #1
 800090a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 =  *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_SIZE_BYTE));
 800090c:	8afb      	ldrh	r3, [r7, #22]
 800090e:	3b04      	subs	r3, #4
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4413      	add	r3, r2
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	613b      	str	r3, [r7, #16]

	/*CRC Verification*/
	CRC_Verify = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0], Host_CMD_Packet_Len - CRC_SIZE_BYTE, Host_CRC32);
 8000918:	8afb      	ldrh	r3, [r7, #22]
 800091a:	3b04      	subs	r3, #4
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4619      	mov	r1, r3
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff5f 	bl	80007e4 <Bootloader_CRC_Verify>
 8000926:	4603      	mov	r3, r0
 8000928:	73fb      	strb	r3, [r7, #15]
	if(CRC_VERIFICATION_PASSED == CRC_Verify){
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d10c      	bne.n	800094a <Bootloader_Get_Version+0x6a>
		Bootloader_Send_ACK(4);
 8000930:	2004      	movs	r0, #4
 8000932:	f7ff ff95 	bl	8000860 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)BL_Version, 4);
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2104      	movs	r1, #4
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ffbb 	bl	80008b8 <Bootloader_Send_Data_To_Host>


#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification Successful \r\n");
 8000942:	4808      	ldr	r0, [pc, #32]	; (8000964 <Bootloader_Get_Version+0x84>)
 8000944:	f000 fb56 	bl	8000ff4 <BL_print_message>
		Bootloader_Send_NACK();
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification failed \r\n");
#endif
	}
}
 8000948:	e004      	b.n	8000954 <Bootloader_Get_Version+0x74>
		Bootloader_Send_NACK();
 800094a:	f7ff ffa3 	bl	8000894 <Bootloader_Send_NACK>
	BL_print_message("CRC Verification failed \r\n");
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <Bootloader_Get_Version+0x88>)
 8000950:	f000 fb50 	bl	8000ff4 <BL_print_message>
}
 8000954:	bf00      	nop
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	03050164 	.word	0x03050164
 8000960:	080043a4 	.word	0x080043a4
 8000964:	080043d0 	.word	0x080043d0
 8000968:	080043f0 	.word	0x080043f0

0800096c <Bootloader_Get_Help>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Get_Help(uint8_t *Host_Buffer){
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
	uint8_t CRC_Verify  = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Read the commands supported by the bootloader \r\n");
 8000980:	4816      	ldr	r0, [pc, #88]	; (80009dc <Bootloader_Get_Help+0x70>)
 8000982:	f000 fb37 	bl	8000ff4 <BL_print_message>
#endif

	/* Extract the CRC32 and Packet length send by the Host */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	3301      	adds	r3, #1
 800098e:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 =  *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_SIZE_BYTE));
 8000990:	8afb      	ldrh	r3, [r7, #22]
 8000992:	3b04      	subs	r3, #4
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	613b      	str	r3, [r7, #16]

	/*CRC Verification*/
	CRC_Verify = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0], Host_CMD_Packet_Len - CRC_SIZE_BYTE, Host_CRC32);
 800099c:	8afb      	ldrh	r3, [r7, #22]
 800099e:	3b04      	subs	r3, #4
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4619      	mov	r1, r3
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff1d 	bl	80007e4 <Bootloader_CRC_Verify>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
	if(CRC_VERIFICATION_PASSED == CRC_Verify){
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d10a      	bne.n	80009ca <Bootloader_Get_Help+0x5e>
		Bootloader_Send_ACK(12);
 80009b4:	200c      	movs	r0, #12
 80009b6:	f7ff ff53 	bl	8000860 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)Bootloader_Support_CMDs, 12);
 80009ba:	210c      	movs	r1, #12
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <Bootloader_Get_Help+0x74>)
 80009be:	f7ff ff7b 	bl	80008b8 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification Successful \r\n");
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <Bootloader_Get_Help+0x78>)
 80009c4:	f000 fb16 	bl	8000ff4 <BL_print_message>
		Bootloader_Send_NACK();
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification failed \r\n");
#endif
	}
}
 80009c8:	e004      	b.n	80009d4 <Bootloader_Get_Help+0x68>
		Bootloader_Send_NACK();
 80009ca:	f7ff ff63 	bl	8000894 <Bootloader_Send_NACK>
	BL_print_message("CRC Verification failed \r\n");
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <Bootloader_Get_Help+0x7c>)
 80009d0:	f000 fb10 	bl	8000ff4 <BL_print_message>
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	0800440c 	.word	0x0800440c
 80009e0:	20000000 	.word	0x20000000
 80009e4:	080043d0 	.word	0x080043d0
 80009e8:	080043f0 	.word	0x080043f0

080009ec <Bootloader_Get_Chip_Identification_Number>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
	uint8_t CRC_Verify  = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
	uint16_t ID_Code = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	81bb      	strh	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Read the MCU chip identification number \r\n");
 8000a04:	481b      	ldr	r0, [pc, #108]	; (8000a74 <Bootloader_Get_Chip_Identification_Number+0x88>)
 8000a06:	f000 faf5 	bl	8000ff4 <BL_print_message>
#endif

	/* Extract the CRC32 and Packet length send by the Host */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	3301      	adds	r3, #1
 8000a12:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 =  *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_SIZE_BYTE));
 8000a14:	8afb      	ldrh	r3, [r7, #22]
 8000a16:	3b04      	subs	r3, #4
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]

	/*CRC Verification*/
	CRC_Verify = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0], Host_CMD_Packet_Len - CRC_SIZE_BYTE, Host_CRC32);
 8000a20:	8afb      	ldrh	r3, [r7, #22]
 8000a22:	3b04      	subs	r3, #4
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4619      	mov	r1, r3
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fedb 	bl	80007e4 <Bootloader_CRC_Verify>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	73fb      	strb	r3, [r7, #15]
	if(CRC_VERIFICATION_PASSED == CRC_Verify){
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d113      	bne.n	8000a60 <Bootloader_Get_Chip_Identification_Number+0x74>
		/* Get chip identification number */
		ID_Code = (uint16_t)((*((uint32_t *)0xE0042000)) & 0x00000FFF);
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <Bootloader_Get_Chip_Identification_Number+0x8c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	81bb      	strh	r3, [r7, #12]
		/* Report chip identification number to Host*/
		Bootloader_Send_ACK(2);
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff ff0a 	bl	8000860 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)&ID_Code,2);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2102      	movs	r1, #2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff30 	bl	80008b8 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification Successful \r\n");
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <Bootloader_Get_Chip_Identification_Number+0x90>)
 8000a5a:	f000 facb 	bl	8000ff4 <BL_print_message>
		Bootloader_Send_NACK();
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification failed \r\n");
#endif
	}
}
 8000a5e:	e004      	b.n	8000a6a <Bootloader_Get_Chip_Identification_Number+0x7e>
		Bootloader_Send_NACK();
 8000a60:	f7ff ff18 	bl	8000894 <Bootloader_Send_NACK>
	BL_print_message("CRC Verification failed \r\n");
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <Bootloader_Get_Chip_Identification_Number+0x94>)
 8000a66:	f000 fac5 	bl	8000ff4 <BL_print_message>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	08004440 	.word	0x08004440
 8000a78:	e0042000 	.word	0xe0042000
 8000a7c:	080043d0 	.word	0x080043d0
 8000a80:	080043f0 	.word	0x080043f0

08000a84 <Bootloader_Read_Protection_Level>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
	uint8_t CRC_Verify  = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]
	uint8_t RDP_level = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73bb      	strb	r3, [r7, #14]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Read the FLASH Read Protection level \r\n");
 8000a9c:	4819      	ldr	r0, [pc, #100]	; (8000b04 <Bootloader_Read_Protection_Level+0x80>)
 8000a9e:	f000 faa9 	bl	8000ff4 <BL_print_message>
#endif

	/* Extract the CRC32 and Packet length send by the Host */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 =  *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_SIZE_BYTE));
 8000aac:	8afb      	ldrh	r3, [r7, #22]
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]

	/*CRC Verification*/
	CRC_Verify = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0], Host_CMD_Packet_Len - CRC_SIZE_BYTE, Host_CRC32);
 8000ab8:	8afb      	ldrh	r3, [r7, #22]
 8000aba:	3b04      	subs	r3, #4
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fe8f 	bl	80007e4 <Bootloader_CRC_Verify>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
	if(CRC_VERIFICATION_PASSED == CRC_Verify){
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d110      	bne.n	8000af2 <Bootloader_Read_Protection_Level+0x6e>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification Successful \r\n");
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <Bootloader_Read_Protection_Level+0x84>)
 8000ad2:	f000 fa8f 	bl	8000ff4 <BL_print_message>
#endif
		Bootloader_Send_ACK(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f7ff fec2 	bl	8000860 <Bootloader_Send_ACK>
		/* Get flash protection level */
		RDP_level = CBL_STM32F401_Get_RDP_Level();
 8000adc:	f000 f9b0 	bl	8000e40 <CBL_STM32F401_Get_RDP_Level>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73bb      	strb	r3, [r7, #14]
		/* Report flash protection level to Host*/
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_level,1);
 8000ae4:	f107 030e 	add.w	r3, r7, #14
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fee4 	bl	80008b8 <Bootloader_Send_Data_To_Host>
		Bootloader_Send_NACK();
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification failed \r\n");
#endif
	}
}
 8000af0:	e004      	b.n	8000afc <Bootloader_Read_Protection_Level+0x78>
		Bootloader_Send_NACK();
 8000af2:	f7ff fecf 	bl	8000894 <Bootloader_Send_NACK>
	BL_print_message("CRC Verification failed \r\n");
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <Bootloader_Read_Protection_Level+0x88>)
 8000af8:	f000 fa7c 	bl	8000ff4 <BL_print_message>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	0800446c 	.word	0x0800446c
 8000b08:	080043d0 	.word	0x080043d0
 8000b0c:	080043f0 	.word	0x080043f0

08000b10 <Bootloader_Jump_To_Address>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Jump_To_Address(uint8_t *Host_Buffer){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	83fb      	strh	r3, [r7, #30]
	uint32_t Host_CRC32 = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
	uint8_t CRC_Verify  = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	75fb      	strb	r3, [r7, #23]
	uint32_t Host_Jumb_Address = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	72fb      	strb	r3, [r7, #11]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Jump bootloader to specified address  \r\n");
 8000b2c:	4829      	ldr	r0, [pc, #164]	; (8000bd4 <Bootloader_Jump_To_Address+0xc4>)
 8000b2e:	f000 fa61 	bl	8000ff4 <BL_print_message>
#endif

	/* Extract the CRC32 and Packet length send by the Host */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3301      	adds	r3, #1
 8000b3a:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 =  *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_SIZE_BYTE));
 8000b3c:	8bfb      	ldrh	r3, [r7, #30]
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	61bb      	str	r3, [r7, #24]

	/*CRC Verification*/
	CRC_Verify = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0], Host_CMD_Packet_Len - CRC_SIZE_BYTE, Host_CRC32);
 8000b48:	8bfb      	ldrh	r3, [r7, #30]
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fe47 	bl	80007e4 <Bootloader_CRC_Verify>
 8000b56:	4603      	mov	r3, r0
 8000b58:	75fb      	strb	r3, [r7, #23]
	if(CRC_VERIFICATION_PASSED == CRC_Verify)
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d12f      	bne.n	8000bc0 <Bootloader_Jump_To_Address+0xb0>
	{

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification Successful \r\n");
 8000b60:	481d      	ldr	r0, [pc, #116]	; (8000bd8 <Bootloader_Jump_To_Address+0xc8>)
 8000b62:	f000 fa47 	bl	8000ff4 <BL_print_message>
#endif
		Bootloader_Send_ACK(1);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f7ff fe7a 	bl	8000860 <Bootloader_Send_ACK>

		/* Extract the address from the HOST Packet */
		Host_Jumb_Address = *((uint32_t *)&Host_Buffer[2]);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000b72:	613b      	str	r3, [r7, #16]

		Address_Verification = Host_Address_Verification(Host_Jumb_Address);
 8000b74:	6938      	ldr	r0, [r7, #16]
 8000b76:	f7ff fe0b 	bl	8000790 <Host_Address_Verification>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	72fb      	strb	r3, [r7, #11]
		if(ADDRESS_IS_VALID == Address_Verification)
 8000b7e:	7afb      	ldrb	r3, [r7, #11]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d113      	bne.n	8000bac <Bootloader_Jump_To_Address+0x9c>
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Address Verification Successful \r\n");
 8000b84:	4815      	ldr	r0, [pc, #84]	; (8000bdc <Bootloader_Jump_To_Address+0xcc>)
 8000b86:	f000 fa35 	bl	8000ff4 <BL_print_message>
#endif
			/* Report address verification succeeded */
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification,1);
 8000b8a:	f107 030b 	add.w	r3, r7, #11
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fe91 	bl	80008b8 <Bootloader_Send_Data_To_Host>
			/* Prepare the address to jump */
			Jump_ptr Jump_Address = (Jump_ptr)(Host_Jumb_Address | 0x00000001);
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Jump to : 0x%X \r\n",Jump_Address);
 8000b9e:	68f9      	ldr	r1, [r7, #12]
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <Bootloader_Jump_To_Address+0xd0>)
 8000ba2:	f000 fa27 	bl	8000ff4 <BL_print_message>
#endif
			/* Jump to Address*/
			Jump_Address();
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4798      	blx	r3
		Bootloader_Send_NACK();
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("CRC Verification failed \r\n");
#endif
	}
}
 8000baa:	e00e      	b.n	8000bca <Bootloader_Jump_To_Address+0xba>
	BL_print_message("Address Verification Failed \r\n");
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <Bootloader_Jump_To_Address+0xd4>)
 8000bae:	f000 fa21 	bl	8000ff4 <BL_print_message>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification,1);
 8000bb2:	f107 030b 	add.w	r3, r7, #11
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fe7d 	bl	80008b8 <Bootloader_Send_Data_To_Host>
}
 8000bbe:	e004      	b.n	8000bca <Bootloader_Jump_To_Address+0xba>
		Bootloader_Send_NACK();
 8000bc0:	f7ff fe68 	bl	8000894 <Bootloader_Send_NACK>
	BL_print_message("CRC Verification failed \r\n");
 8000bc4:	4808      	ldr	r0, [pc, #32]	; (8000be8 <Bootloader_Jump_To_Address+0xd8>)
 8000bc6:	f000 fa15 	bl	8000ff4 <BL_print_message>
}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08004494 	.word	0x08004494
 8000bd8:	080043d0 	.word	0x080043d0
 8000bdc:	080044c0 	.word	0x080044c0
 8000be0:	080044e4 	.word	0x080044e4
 8000be4:	080044f8 	.word	0x080044f8
 8000be8:	080043f0 	.word	0x080043f0

08000bec <Bootloader_Erase_Flash>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Erase_Flash(uint8_t *Host_Buffer){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
	uint8_t CRC_Verify  = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
	uint8_t Sector_Erase_Status = SECTOR_ERASE_FAILED;
 8000c00:	2302      	movs	r3, #2
 8000c02:	73bb      	strb	r3, [r7, #14]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Mass erase or sector erase of the user flash \r\n");
 8000c04:	482c      	ldr	r0, [pc, #176]	; (8000cb8 <Bootloader_Erase_Flash+0xcc>)
 8000c06:	f000 f9f5 	bl	8000ff4 <BL_print_message>
#endif

	/* Extract the CRC32 and Packet length send by the Host */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	3301      	adds	r3, #1
 8000c12:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 =  *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_SIZE_BYTE));
 8000c14:	8afb      	ldrh	r3, [r7, #22]
 8000c16:	3b04      	subs	r3, #4
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]

	/*CRC Verification*/
	CRC_Verify = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0], Host_CMD_Packet_Len - CRC_SIZE_BYTE, Host_CRC32);
 8000c20:	8afb      	ldrh	r3, [r7, #22]
 8000c22:	3b04      	subs	r3, #4
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fddb 	bl	80007e4 <Bootloader_CRC_Verify>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
	if(CRC_VERIFICATION_PASSED == CRC_Verify){
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d135      	bne.n	8000ca4 <Bootloader_Erase_Flash+0xb8>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_print_message("CRC Verification Successful \r\n");
 8000c38:	4820      	ldr	r0, [pc, #128]	; (8000cbc <Bootloader_Erase_Flash+0xd0>)
 8000c3a:	f000 f9db 	bl	8000ff4 <BL_print_message>
#endif
		Bootloader_Send_ACK(1);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff fe0e 	bl	8000860 <Bootloader_Send_ACK>
		Sector_Erase_Status = perform_Flash_Erase(Host_Buffer[2],Host_Buffer[3]);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3302      	adds	r3, #2
 8000c48:	781a      	ldrb	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3303      	adds	r3, #3
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	4610      	mov	r0, r2
 8000c54:	f000 f95a 	bl	8000f0c <perform_Flash_Erase>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	73bb      	strb	r3, [r7, #14]
		if(SECTOR_ERASE_SUCCESS == Sector_Erase_Status)
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d109      	bne.n	8000c76 <Bootloader_Erase_Flash+0x8a>
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_print_message("Sector Erase Successful \r\n");
 8000c62:	4817      	ldr	r0, [pc, #92]	; (8000cc0 <Bootloader_Erase_Flash+0xd4>)
 8000c64:	f000 f9c6 	bl	8000ff4 <BL_print_message>
#endif
			Bootloader_Send_Data_To_Host((uint8_t *)&Sector_Erase_Status,1);
 8000c68:	f107 030e 	add.w	r3, r7, #14
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe22 	bl	80008b8 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_print_message("CRC Verification failed \r\n");
#endif
	}

}
 8000c74:	e01b      	b.n	8000cae <Bootloader_Erase_Flash+0xc2>
		else if(SECTOR_ERASE_FAILED == Sector_Erase_Status)
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d109      	bne.n	8000c90 <Bootloader_Erase_Flash+0xa4>
			BL_print_message("Sector Erase Failed \r\n");
 8000c7c:	4811      	ldr	r0, [pc, #68]	; (8000cc4 <Bootloader_Erase_Flash+0xd8>)
 8000c7e:	f000 f9b9 	bl	8000ff4 <BL_print_message>
			Bootloader_Send_Data_To_Host((uint8_t *)&Sector_Erase_Status,1);
 8000c82:	f107 030e 	add.w	r3, r7, #14
 8000c86:	2101      	movs	r1, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe15 	bl	80008b8 <Bootloader_Send_Data_To_Host>
}
 8000c8e:	e00e      	b.n	8000cae <Bootloader_Erase_Flash+0xc2>
			BL_print_message("Invalid Sector Number \r\n");
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <Bootloader_Erase_Flash+0xdc>)
 8000c92:	f000 f9af 	bl	8000ff4 <BL_print_message>
			Bootloader_Send_Data_To_Host((uint8_t *)&Sector_Erase_Status,1);
 8000c96:	f107 030e 	add.w	r3, r7, #14
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe0b 	bl	80008b8 <Bootloader_Send_Data_To_Host>
}
 8000ca2:	e004      	b.n	8000cae <Bootloader_Erase_Flash+0xc2>
		Bootloader_Send_NACK();
 8000ca4:	f7ff fdf6 	bl	8000894 <Bootloader_Send_NACK>
		BL_print_message("CRC Verification failed \r\n");
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <Bootloader_Erase_Flash+0xe0>)
 8000caa:	f000 f9a3 	bl	8000ff4 <BL_print_message>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	08004518 	.word	0x08004518
 8000cbc:	080043d0 	.word	0x080043d0
 8000cc0:	08004548 	.word	0x08004548
 8000cc4:	08004564 	.word	0x08004564
 8000cc8:	0800457c 	.word	0x0800457c
 8000ccc:	080043f0 	.word	0x080043f0

08000cd0 <Bootloader_Memory_Write>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Memory_Write(uint8_t *Host_Buffer){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	83fb      	strh	r3, [r7, #30]
	uint32_t Host_CRC32 = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
	uint8_t CRC_Verify  = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	75fb      	strb	r3, [r7, #23]
	uint32_t Host_Address = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
	uint8_t Pyload_Len  = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73bb      	strb	r3, [r7, #14]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	737b      	strb	r3, [r7, #13]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Write data into different memories of the MCU \r\n");
 8000cf4:	4832      	ldr	r0, [pc, #200]	; (8000dc0 <Bootloader_Memory_Write+0xf0>)
 8000cf6:	f000 f97d 	bl	8000ff4 <BL_print_message>
#endif

	/* Extract the CRC32 and Packet length send by the Host */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	3301      	adds	r3, #1
 8000d02:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 =  *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_SIZE_BYTE));
 8000d04:	8bfb      	ldrh	r3, [r7, #30]
 8000d06:	3b04      	subs	r3, #4
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	61bb      	str	r3, [r7, #24]

	/*CRC Verification*/
	CRC_Verify = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0], Host_CMD_Packet_Len - CRC_SIZE_BYTE, Host_CRC32);
 8000d10:	8bfb      	ldrh	r3, [r7, #30]
 8000d12:	3b04      	subs	r3, #4
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4619      	mov	r1, r3
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff fd63 	bl	80007e4 <Bootloader_CRC_Verify>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	75fb      	strb	r3, [r7, #23]
	if(CRC_VERIFICATION_PASSED == CRC_Verify){
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d141      	bne.n	8000dac <Bootloader_Memory_Write+0xdc>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_print_message("CRC Verification Successful \r\n");
 8000d28:	4826      	ldr	r0, [pc, #152]	; (8000dc4 <Bootloader_Memory_Write+0xf4>)
 8000d2a:	f000 f963 	bl	8000ff4 <BL_print_message>
#endif
		Bootloader_Send_ACK(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fd96 	bl	8000860 <Bootloader_Send_ACK>

		/* Extract the start address from the Host packet */
		Host_Address = *((uint32_t *)&Host_Buffer[2]);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000d3a:	613b      	str	r3, [r7, #16]
		/* Extract the payload length from the Host packet */
		Pyload_Len = *((uint8_t *)&Host_Buffer[6]);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	799b      	ldrb	r3, [r3, #6]
 8000d40:	73fb      	strb	r3, [r7, #15]

		Address_Verification = Host_Address_Verification(Host_Address);
 8000d42:	6938      	ldr	r0, [r7, #16]
 8000d44:	f7ff fd24 	bl	8000790 <Host_Address_Verification>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73bb      	strb	r3, [r7, #14]
		if(ADDRESS_IS_VALID == Address_Verification)
 8000d4c:	7bbb      	ldrb	r3, [r7, #14]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d122      	bne.n	8000d98 <Bootloader_Memory_Write+0xc8>
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Address Verification Successful \r\n");
 8000d52:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <Bootloader_Memory_Write+0xf8>)
 8000d54:	f000 f94e 	bl	8000ff4 <BL_print_message>
#endif


			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], Host_Address, Pyload_Len);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3307      	adds	r3, #7
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	6939      	ldr	r1, [r7, #16]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f87a 	bl	8000e5a <Flash_Memory_Write_Payload>
 8000d66:	4603      	mov	r3, r0
 8000d68:	737b      	strb	r3, [r7, #13]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status)
 8000d6a:	7b7b      	ldrb	r3, [r7, #13]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d109      	bne.n	8000d84 <Bootloader_Memory_Write+0xb4>
			{
				/* Report Payload Write succeeded */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status,1);
 8000d70:	f107 030d 	add.w	r3, r7, #13
 8000d74:	2101      	movs	r1, #1
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fd9e 	bl	80008b8 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_print_message("Payload Success \r\n");
 8000d7c:	4813      	ldr	r0, [pc, #76]	; (8000dcc <Bootloader_Memory_Write+0xfc>)
 8000d7e:	f000 f939 	bl	8000ff4 <BL_print_message>
		Bootloader_Send_NACK();
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_print_message("CRC Verification failed \r\n");
#endif
	}
}
 8000d82:	e018      	b.n	8000db6 <Bootloader_Memory_Write+0xe6>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status,1);
 8000d84:	f107 030d 	add.w	r3, r7, #13
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fd94 	bl	80008b8 <Bootloader_Send_Data_To_Host>
				BL_print_message("Payload Faild \r\n");
 8000d90:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <Bootloader_Memory_Write+0x100>)
 8000d92:	f000 f92f 	bl	8000ff4 <BL_print_message>
}
 8000d96:	e00e      	b.n	8000db6 <Bootloader_Memory_Write+0xe6>
	BL_print_message("Address Verification Failed \r\n");
 8000d98:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <Bootloader_Memory_Write+0x104>)
 8000d9a:	f000 f92b 	bl	8000ff4 <BL_print_message>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification,1);
 8000d9e:	f107 030e 	add.w	r3, r7, #14
 8000da2:	2101      	movs	r1, #1
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fd87 	bl	80008b8 <Bootloader_Send_Data_To_Host>
}
 8000daa:	e004      	b.n	8000db6 <Bootloader_Memory_Write+0xe6>
		Bootloader_Send_NACK();
 8000dac:	f7ff fd72 	bl	8000894 <Bootloader_Send_NACK>
		BL_print_message("CRC Verification failed \r\n");
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <Bootloader_Memory_Write+0x108>)
 8000db2:	f000 f91f 	bl	8000ff4 <BL_print_message>
}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08004598 	.word	0x08004598
 8000dc4:	080043d0 	.word	0x080043d0
 8000dc8:	080044c0 	.word	0x080044c0
 8000dcc:	080045cc 	.word	0x080045cc
 8000dd0:	080045e0 	.word	0x080045e0
 8000dd4:	080044f8 	.word	0x080044f8
 8000dd8:	080043f0 	.word	0x080043f0

08000ddc <Bootloader_Enable_RW_Protection>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Enable_RW_Protection(uint8_t *Host_Buffer){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <Bootloader_Memory_Read>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Memory_Read(uint8_t *Host_Buffer){
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <Bootloader_Get_Sector_Protection_Status>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Get_Sector_Protection_Status(uint8_t *Host_Buffer){
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <Bootloader_Read_OTP>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Read_OTP(uint8_t *Host_Buffer){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <Bootloader_Disable_RW_Protection>:

/**
 * 
 * @param Host_Buffer
 */
static void Bootloader_Disable_RW_Protection(uint8_t *Host_Buffer){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <CBL_STM32F401_Get_RDP_Level>:

static uint8_t CBL_STM32F401_Get_RDP_Level(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef pOBInit;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&pOBInit);
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 f803 	bl	8001e54 <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(pOBInit.RDPLevel);
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	b2db      	uxtb	r3, r3
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <Flash_Memory_Write_Payload>:

static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t payload_Start_Address, uint32_t payload_Len){
 8000e5a:	b5b0      	push	{r4, r5, r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75bb      	strb	r3, [r7, #22]
	uint16_t payload_Counter = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH Option Control Registers access.*/
	HAL_Status = HAL_FLASH_Unlock();
 8000e72:	f000 fe0d 	bl	8001a90 <HAL_FLASH_Unlock>
 8000e76:	4603      	mov	r3, r0
 8000e78:	75fb      	strb	r3, [r7, #23]
	if(HAL_OK != HAL_Status)
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <Flash_Memory_Write_Payload+0x2c>
	{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000e80:	2300      	movs	r3, #0
 8000e82:	75bb      	strb	r3, [r7, #22]
 8000e84:	e027      	b.n	8000ed6 <Flash_Memory_Write_Payload+0x7c>
	}
	else
	{
		for(payload_Counter = 0; payload_Counter < payload_Len; payload_Counter++){
 8000e86:	2300      	movs	r3, #0
 8000e88:	82bb      	strh	r3, [r7, #20]
 8000e8a:	e020      	b.n	8000ece <Flash_Memory_Write_Payload+0x74>
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, payload_Start_Address + payload_Counter, Host_Payload[payload_Counter]);
 8000e8c:	8aba      	ldrh	r2, [r7, #20]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	18d1      	adds	r1, r2, r3
 8000e92:	8abb      	ldrh	r3, [r7, #20]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	4615      	mov	r5, r2
 8000ea2:	4622      	mov	r2, r4
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 fd9e 	bl	80019e8 <HAL_FLASH_Program>
 8000eac:	4603      	mov	r3, r0
 8000eae:	75fb      	strb	r3, [r7, #23]
			if(HAL_OK != HAL_Status){
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <Flash_Memory_Write_Payload+0x6a>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75bb      	strb	r3, [r7, #22]
				/* Lock the FLASH Option Control Registers access.*/
				HAL_Status = HAL_FLASH_Lock();
 8000eba:	f000 fe0b 	bl	8001ad4 <HAL_FLASH_Lock>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	75fb      	strb	r3, [r7, #23]
				break;
 8000ec2:	e008      	b.n	8000ed6 <Flash_Memory_Write_Payload+0x7c>
			}else
			{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	75bb      	strb	r3, [r7, #22]
		for(payload_Counter = 0; payload_Counter < payload_Len; payload_Counter++){
 8000ec8:	8abb      	ldrh	r3, [r7, #20]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	82bb      	strh	r3, [r7, #20]
 8000ece:	8abb      	ldrh	r3, [r7, #20]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d8da      	bhi.n	8000e8c <Flash_Memory_Write_Payload+0x32>
			}
		}
	}
	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status))
 8000ed6:	7dbb      	ldrb	r3, [r7, #22]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d10f      	bne.n	8000efc <Flash_Memory_Write_Payload+0xa2>
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10c      	bne.n	8000efc <Flash_Memory_Write_Payload+0xa2>
	{
		/* Lock the FLASH Option Control Registers access.*/
		HAL_Status = HAL_FLASH_Lock();
 8000ee2:	f000 fdf7 	bl	8001ad4 <HAL_FLASH_Lock>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	75fb      	strb	r3, [r7, #23]
		if(HAL_OK != HAL_Status)
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <Flash_Memory_Write_Payload+0x9c>
			{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	75bb      	strb	r3, [r7, #22]
		if(HAL_OK != HAL_Status)
 8000ef4:	e004      	b.n	8000f00 <Flash_Memory_Write_Payload+0xa6>
			}
			else
			{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	75bb      	strb	r3, [r7, #22]
		if(HAL_OK != HAL_Status)
 8000efa:	e001      	b.n	8000f00 <Flash_Memory_Write_Payload+0xa6>
			}
	}
	else
	{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000efc:	2300      	movs	r3, #0
 8000efe:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 8000f00:	7dbb      	ldrb	r3, [r7, #22]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f0c <perform_Flash_Erase>:

static uint8_t perform_Flash_Erase(uint8_t sector_Number, uint8_t numberOf_Sectors){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t Sector_Validity_Status = INVAlID_SECTOR_NUMBER;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Remaining_Sectors = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t SectorError = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
	FLASH_EraseInitTypeDef pEraseInit;
	if(numberOf_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER)
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d903      	bls.n	8000f40 <perform_Flash_Erase+0x34>
	{
		Sector_Validity_Status = INVAlID_SECTOR_NUMBER ;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f3e:	e04f      	b.n	8000fe0 <perform_Flash_Erase+0xd4>
	}
	else
	{
		if((sector_Number <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == sector_Number))
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	d902      	bls.n	8000f4c <perform_Flash_Erase+0x40>
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2bff      	cmp	r3, #255	; 0xff
 8000f4a:	d146      	bne.n	8000fda <perform_Flash_Erase+0xce>
		{
			if(CBL_FLASH_MASS_ERASE == sector_Number)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d105      	bne.n	8000f5e <perform_Flash_Erase+0x52>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000f52:	2301      	movs	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_print_message("CBL_FLASH_MASS_ERASE ----------------------------- \r\n");
 8000f56:	4825      	ldr	r0, [pc, #148]	; (8000fec <perform_Flash_Erase+0xe0>)
 8000f58:	f000 f84c 	bl	8000ff4 <BL_print_message>
 8000f5c:	e012      	b.n	8000f84 <perform_Flash_Erase+0x78>
			}
			else
			{
				/* User needs Sector erase */

				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - sector_Number;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f1c3 0308 	rsb	r3, r3, #8
 8000f64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				if(numberOf_Sectors > Remaining_Sectors)
 8000f68:	79ba      	ldrb	r2, [r7, #6]
 8000f6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d902      	bls.n	8000f78 <perform_Flash_Erase+0x6c>
				{
					numberOf_Sectors = Remaining_Sectors;
 8000f72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f76:	71bb      	strb	r3, [r7, #6]
				}
				else{/* NoThing */}


				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
				pEraseInit.Sector = sector_Number;            /* Initial FLASH sector to erase when Mass erase is disabled */
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	617b      	str	r3, [r7, #20]
				pEraseInit.NbSectors = numberOf_Sectors;      /* Number of sectors to be erased. */
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	61bb      	str	r3, [r7, #24]
			}
			pEraseInit.Banks = FLASH_BANK_1;              /* Bank 1 */
 8000f84:	2301      	movs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]

			/* Unlock the FLASH Option Control Registers access.*/
			HAL_Status = HAL_FLASH_Unlock();
 8000f8c:	f000 fd80 	bl	8001a90 <HAL_FLASH_Unlock>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f96:	f107 0220 	add.w	r2, r7, #32
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fee7 	bl	8001d74 <HAL_FLASHEx_Erase>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			if(FALSH_SUCCESSFUL_ERASE == SectorError)
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb2:	d103      	bne.n	8000fbc <perform_Flash_Erase+0xb0>
			{
				Sector_Validity_Status = SECTOR_ERASE_SUCCESS;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fba:	e002      	b.n	8000fc2 <perform_Flash_Erase+0xb6>
			}
			else
			{
				Sector_Validity_Status = SECTOR_ERASE_FAILED;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			/* Lock the FLASH Option Control Registers access.*/
			HAL_Status = HAL_FLASH_Lock();
 8000fc2:	f000 fd87 	bl	8001ad4 <HAL_FLASH_Lock>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_print_message("HAL_Status = HAL_FLASHEx_Erase ===== 0x%x \r\n",HAL_Status);
 8000fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <perform_Flash_Erase+0xe4>)
 8000fd4:	f000 f80e 	bl	8000ff4 <BL_print_message>
 8000fd8:	e002      	b.n	8000fe0 <perform_Flash_Erase+0xd4>
#endif

		}
		else
		{
			Sector_Validity_Status = INVAlID_SECTOR_NUMBER ;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

	}
	return Sector_Validity_Status;
 8000fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	080045f4 	.word	0x080045f4
 8000ff0:	0800462c 	.word	0x0800462c

08000ff4 <BL_print_message>:
/**
 *
 * @param format
 * @param ...
 */
void BL_print_message(char *format, ... ){
 8000ff4:	b40f      	push	{r0, r1, r2, r3}
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b09a      	sub	sp, #104	; 0x68
 8000ffa:	af00      	add	r7, sp, #0
	char Message[100]={0};
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	2260      	movs	r2, #96	; 0x60
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fca9 	bl	8003960 <memset>
	va_list args;
	va_start(args, format);
 800100e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001012:	603b      	str	r3, [r7, #0]
	vsprintf(Message, format, args);
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fcbe 	bl	800399c <vsiprintf>
#if BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE
	HAL_UART_Transmit(BL_DEBUG_UART,(uint8_t *)Message,sizeof(Message),HAL_MAX_DELAY);
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	2264      	movs	r2, #100	; 0x64
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <BL_print_message+0x48>)
 800102a:	f002 f859 	bl	80030e0 <HAL_UART_Transmit>

#else

#endif
	va_end(args);
}
 800102e:	bf00      	nop
 8001030:	3768      	adds	r7, #104	; 0x68
 8001032:	46bd      	mov	sp, r7
 8001034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001038:	b004      	add	sp, #16
 800103a:	4770      	bx	lr
 800103c:	200001a4 	.word	0x200001a4

08001040 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_CRC_Init+0x20>)
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <MX_CRC_Init+0x24>)
 8001048:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_CRC_Init+0x20>)
 800104c:	f000 fc55 	bl	80018fa <HAL_CRC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001056:	f000 f929 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000198 	.word	0x20000198
 8001064:	40023000 	.word	0x40023000

08001068 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_CRC_MspInit+0x3c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10d      	bne.n	8001096 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_CRC_MspInit+0x40>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_CRC_MspInit+0x40>)
 8001084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_CRC_MspInit+0x40>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023000 	.word	0x40023000
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_CRC_MspDeInit+0x2c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d105      	bne.n	80010ca <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_CRC_MspDeInit+0x30>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_CRC_MspDeInit+0x30>)
 80010c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023000 	.word	0x40023000
 80010dc:	40023800 	.word	0x40023800

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_GPIO_Init+0xb8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a26      	ldr	r2, [pc, #152]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <MX_GPIO_Init+0xb8>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a18      	ldr	r2, [pc, #96]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a11      	ldr	r2, [pc, #68]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_GPIO_Init+0xb8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ALSIKELY_GPIO_Port, LED_ALSIKELY_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <MX_GPIO_Init+0xbc>)
 800116e:	f001 f9fb 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ALSIKELY_Pin;
 8001172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ALSIKELY_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_GPIO_Init+0xbc>)
 800118c:	f000 ff84 	bl	8002098 <HAL_GPIO_Init>

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40020800 	.word	0x40020800

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BL_Status Status = BL_NACK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011aa:	f000 fa4f 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ae:	f000 f813 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b2:	f7ff ff95 	bl	80010e0 <MX_GPIO_Init>
  MX_CRC_Init();
 80011b6:	f7ff ff43 	bl	8001040 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80011ba:	f000 f91d 	bl	80013f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011be:	f000 f945 	bl	800144c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_print_message("Bootloder started !! \r\n");
 80011c2:	4804      	ldr	r0, [pc, #16]	; (80011d4 <main+0x34>)
 80011c4:	f7ff ff16 	bl	8000ff4 <BL_print_message>
	  //BL_print_message("%s %i \r\n",message1,var);
	  //Status = BL_UART_Featch_Host_Command();
	  //BL_print_message("BL_UART_Featch_Host_Command status = %i \r\n",Status);
	  /*******************************************************/

	  Status = BL_UART_Featch_Host_Command();
 80011c8:	f7ff f9dc 	bl	8000584 <BL_UART_Featch_Host_Command>
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	e7fa      	b.n	80011c8 <main+0x28>
 80011d2:	bf00      	nop
 80011d4:	0800465c 	.word	0x0800465c

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	; 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2230      	movs	r2, #48	; 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 fbba 	bl	8003960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <SystemClock_Config+0xcc>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a27      	ldr	r2, [pc, #156]	; (80012a4 <SystemClock_Config+0xcc>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <SystemClock_Config+0xcc>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <SystemClock_Config+0xd0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001224:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <SystemClock_Config+0xd0>)
 8001226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <SystemClock_Config+0xd0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800124c:	2308      	movs	r3, #8
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001250:	2354      	movs	r3, #84	; 0x54
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001258:	2304      	movs	r3, #4
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4618      	mov	r0, r3
 8001262:	f001 f99b 	bl	800259c <HAL_RCC_OscConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800126c:	f000 f81e 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	230f      	movs	r3, #15
 8001272:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2302      	movs	r3, #2
 8001276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2102      	movs	r1, #2
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fbfd 	bl	8002a8c <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001298:	f000 f808 	bl	80012ac <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3750      	adds	r7, #80	; 0x50
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>
	...

08001310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BL_print_message("HART FAULT");
 8001314:	4801      	ldr	r0, [pc, #4]	; (800131c <HardFault_Handler+0xc>)
 8001316:	f7ff fe6d 	bl	8000ff4 <BL_print_message>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0xa>
 800131c:	08004674 	.word	0x08004674

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f9c6 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f002 fab8 	bl	800390c <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20010000 	.word	0x20010000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	200001a0 	.word	0x200001a0
 80013d0:	20000260 	.word	0x20000260

080013d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SystemInit+0x20>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <SystemInit+0x20>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART1_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001430:	f001 fdda 	bl	8002fe8 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f7ff ff37 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001a4 	.word	0x200001a4
 8001448:	40011000 	.word	0x40011000

0800144c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART2_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001484:	f001 fdb0 	bl	8002fe8 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f7ff ff0d 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200001e8 	.word	0x200001e8
 800149c:	40004400 	.word	0x40004400

080014a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a32      	ldr	r2, [pc, #200]	; (8001588 <HAL_UART_MspInit+0xe8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12d      	bne.n	800151e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_UART_MspInit+0xec>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a30      	ldr	r2, [pc, #192]	; (800158c <HAL_UART_MspInit+0xec>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <HAL_UART_MspInit+0xec>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	61bb      	str	r3, [r7, #24]
 80014dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_UART_MspInit+0xec>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a29      	ldr	r2, [pc, #164]	; (800158c <HAL_UART_MspInit+0xec>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_UART_MspInit+0xec>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800150c:	2307      	movs	r3, #7
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	481e      	ldr	r0, [pc, #120]	; (8001590 <HAL_UART_MspInit+0xf0>)
 8001518:	f000 fdbe 	bl	8002098 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800151c:	e030      	b.n	8001580 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <HAL_UART_MspInit+0xf4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d12b      	bne.n	8001580 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_UART_MspInit+0xec>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <HAL_UART_MspInit+0xec>)
 8001532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_UART_MspInit+0xec>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_UART_MspInit+0xec>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	4a0f      	ldr	r2, [pc, #60]	; (800158c <HAL_UART_MspInit+0xec>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6313      	str	r3, [r2, #48]	; 0x30
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_UART_MspInit+0xec>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001560:	230c      	movs	r3, #12
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001570:	2307      	movs	r3, #7
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_UART_MspInit+0xf0>)
 800157c:	f000 fd8c 	bl	8002098 <HAL_GPIO_Init>
}
 8001580:	bf00      	nop
 8001582:	3730      	adds	r7, #48	; 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40011000 	.word	0x40011000
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000
 8001594:	40004400 	.word	0x40004400

08001598 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <HAL_UART_MspDeInit+0x50>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10b      	bne.n	80015c2 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_UART_MspDeInit+0x54>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_UART_MspDeInit+0x54>)
 80015b0:	f023 0310 	bic.w	r3, r3, #16
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80015b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <HAL_UART_MspDeInit+0x58>)
 80015bc:	f000 fef0 	bl	80023a0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80015c0:	e00e      	b.n	80015e0 <HAL_UART_MspDeInit+0x48>
  else if(uartHandle->Instance==USART2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_UART_MspDeInit+0x5c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d109      	bne.n	80015e0 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART2_CLK_DISABLE();
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_UART_MspDeInit+0x54>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_UART_MspDeInit+0x54>)
 80015d2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80015d8:	210c      	movs	r1, #12
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_UART_MspDeInit+0x58>)
 80015dc:	f000 fee0 	bl	80023a0 <HAL_GPIO_DeInit>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40011000 	.word	0x40011000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40004400 	.word	0x40004400

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015fe:	490e      	ldr	r1, [pc, #56]	; (8001638 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001614:	4c0b      	ldr	r4, [pc, #44]	; (8001644 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001622:	f7ff fed7 	bl	80013d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001626:	f002 f977 	bl	8003918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff fdb9 	bl	80011a0 <main>
  bx  lr    
 800162e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800163c:	080046dc 	.word	0x080046dc
  ldr r2, =_sbss
 8001640:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001644:	20000260 	.word	0x20000260

08001648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_Init+0x40>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0a      	ldr	r2, [pc, #40]	; (800168c <HAL_Init+0x40>)
 8001662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_Init+0x40>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001674:	2003      	movs	r0, #3
 8001676:	f000 f90d 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167a:	200f      	movs	r0, #15
 800167c:	f000 f808 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001680:	f7ff fe1a 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023c00 	.word	0x40023c00

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x54>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x58>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f917 	bl	80018e2 <HAL_SYSTICK_Config>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00e      	b.n	80016dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d80a      	bhi.n	80016da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 f8ed 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_InitTick+0x5c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000000c 	.word	0x2000000c
 80016e8:	20000014 	.word	0x20000014
 80016ec:	20000010 	.word	0x20000010

080016f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x20>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x24>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_IncTick+0x24>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000014 	.word	0x20000014
 8001714:	2000022c 	.word	0x2000022c

08001718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_GetTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	2000022c 	.word	0x2000022c

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff8e 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff47 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff5c 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff8e 	bl	80017e8 <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5d 	bl	8001794 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffb0 	bl	8001850 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e00e      	b.n	800192a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	795b      	ldrb	r3, [r3, #5]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fba3 	bl	8001068 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e022      	b.n	800198a <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	795b      	ldrb	r3, [r3, #5]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d101      	bne.n	8001952 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 800194e:	2302      	movs	r3, #2
 8001950:	e01b      	b.n	800198a <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	791b      	ldrb	r3, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fb98 	bl	80010ac <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001992:	b480      	push	{r7}
 8001994:	b087      	sub	sp, #28
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2202      	movs	r2, #2
 80019a6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e00a      	b.n	80019c4 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	441a      	add	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d3f0      	bcc.n	80019ae <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80019da:	693b      	ldr	r3, [r7, #16]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_FLASH_Program+0xa0>)
 80019fc:	7e1b      	ldrb	r3, [r3, #24]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_FLASH_Program+0x1e>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e03b      	b.n	8001a7e <HAL_FLASH_Program+0x96>
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_FLASH_Program+0xa0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a10:	f000 f870 	bl	8001af4 <FLASH_WaitForLastOperation>
 8001a14:	4603      	mov	r3, r0
 8001a16:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d12b      	bne.n	8001a76 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a24:	783b      	ldrb	r3, [r7, #0]
 8001a26:	4619      	mov	r1, r3
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f000 f91b 	bl	8001c64 <FLASH_Program_Byte>
 8001a2e:	e016      	b.n	8001a5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d105      	bne.n	8001a42 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a36:	883b      	ldrh	r3, [r7, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	68b8      	ldr	r0, [r7, #8]
 8001a3c:	f000 f8ee 	bl	8001c1c <FLASH_Program_HalfWord>
 8001a40:	e00d      	b.n	8001a5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d105      	bne.n	8001a54 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	68b8      	ldr	r0, [r7, #8]
 8001a4e:	f000 f8c3 	bl	8001bd8 <FLASH_Program_Word>
 8001a52:	e004      	b.n	8001a5e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a58:	68b8      	ldr	r0, [r7, #8]
 8001a5a:	f000 f88b 	bl	8001b74 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a62:	f000 f847 	bl	8001af4 <FLASH_WaitForLastOperation>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_FLASH_Program+0xa4>)
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_FLASH_Program+0xa4>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_FLASH_Program+0xa0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000230 	.word	0x20000230
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_FLASH_Unlock+0x38>)
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da0b      	bge.n	8001aba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_FLASH_Unlock+0x38>)
 8001aa4:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_FLASH_Unlock+0x3c>)
 8001aa6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_FLASH_Unlock+0x38>)
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_FLASH_Unlock+0x40>)
 8001aac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_FLASH_Unlock+0x38>)
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da01      	bge.n	8001aba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	45670123 	.word	0x45670123
 8001ad0:	cdef89ab 	.word	0xcdef89ab

08001ad4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_FLASH_Lock+0x1c>)
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <HAL_FLASH_Lock+0x1c>)
 8001ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ae2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <FLASH_WaitForLastOperation+0x78>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b06:	f7ff fe07 	bl	8001718 <HAL_GetTick>
 8001b0a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b0c:	e010      	b.n	8001b30 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d00c      	beq.n	8001b30 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <FLASH_WaitForLastOperation+0x38>
 8001b1c:	f7ff fdfc 	bl	8001718 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d201      	bcs.n	8001b30 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e019      	b.n	8001b64 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <FLASH_WaitForLastOperation+0x7c>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e8      	bne.n	8001b0e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <FLASH_WaitForLastOperation+0x7c>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <FLASH_WaitForLastOperation+0x7c>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <FLASH_WaitForLastOperation+0x7c>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b5a:	f000 f8a5 	bl	8001ca8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
  
}  
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000230 	.word	0x20000230
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <FLASH_Program_DoubleWord+0x60>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <FLASH_Program_DoubleWord+0x60>)
 8001b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <FLASH_Program_DoubleWord+0x60>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <FLASH_Program_DoubleWord+0x60>)
 8001b92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <FLASH_Program_DoubleWord+0x60>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <FLASH_Program_DoubleWord+0x60>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001baa:	f3bf 8f6f 	isb	sy
}
 8001bae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	000a      	movs	r2, r1
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	3104      	adds	r1, #4
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <FLASH_Program_Word+0x40>)
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <FLASH_Program_Word+0x40>)
 8001be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <FLASH_Program_Word+0x40>)
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <FLASH_Program_Word+0x40>)
 8001bf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <FLASH_Program_Word+0x40>)
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <FLASH_Program_Word+0x40>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	601a      	str	r2, [r3, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <FLASH_Program_HalfWord+0x44>)
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <FLASH_Program_HalfWord+0x44>)
 8001c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <FLASH_Program_HalfWord+0x44>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <FLASH_Program_HalfWord+0x44>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <FLASH_Program_HalfWord+0x44>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <FLASH_Program_HalfWord+0x44>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	801a      	strh	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <FLASH_Program_Byte+0x40>)
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <FLASH_Program_Byte+0x40>)
 8001c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <FLASH_Program_Byte+0x40>)
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <FLASH_Program_Byte+0x40>)
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <FLASH_Program_Byte+0x40>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <FLASH_Program_Byte+0x40>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	78fa      	ldrb	r2, [r7, #3]
 8001c94:	701a      	strb	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cac:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f043 0310 	orr.w	r3, r3, #16
 8001cc0:	4a2b      	ldr	r2, [pc, #172]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001cc2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cca:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001ce0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001cfe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001d02:	2240      	movs	r2, #64	; 0x40
 8001d04:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001d1c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001d20:	2280      	movs	r2, #128	; 0x80
 8001d22:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d009      	beq.n	8001d44 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001d3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d42:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f043 0320 	orr.w	r3, r3, #32
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <FLASH_SetErrorCode+0xc8>)
 8001d5a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <FLASH_SetErrorCode+0xc4>)
 8001d5e:	2202      	movs	r2, #2
 8001d60:	60da      	str	r2, [r3, #12]
  }
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40023c00 	.word	0x40023c00
 8001d70:	20000230 	.word	0x20000230

08001d74 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_FLASHEx_Erase+0xd8>)
 8001d88:	7e1b      	ldrb	r3, [r3, #24]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_FLASHEx_Erase+0x1e>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e058      	b.n	8001e44 <HAL_FLASHEx_Erase+0xd0>
 8001d92:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_FLASHEx_Erase+0xd8>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d9c:	f7ff feaa 	bl	8001af4 <FLASH_WaitForLastOperation>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d148      	bne.n	8001e3c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295
 8001db0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d115      	bne.n	8001de6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f000 f868 	bl	8001e9c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dd0:	f7ff fe90 	bl	8001af4 <FLASH_WaitForLastOperation>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_FLASHEx_Erase+0xdc>)
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_FLASHEx_Erase+0xdc>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6113      	str	r3, [r2, #16]
 8001de4:	e028      	b.n	8001e38 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	e01c      	b.n	8001e28 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4619      	mov	r1, r3
 8001df6:	68b8      	ldr	r0, [r7, #8]
 8001df8:	f000 f874 	bl	8001ee4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e00:	f7ff fe78 	bl	8001af4 <FLASH_WaitForLastOperation>
 8001e04:	4603      	mov	r3, r0
 8001e06:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_FLASHEx_Erase+0xdc>)
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_FLASHEx_Erase+0xdc>)
 8001e0e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001e12:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	601a      	str	r2, [r3, #0]
          break;
 8001e20:	e00a      	b.n	8001e38 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3301      	adds	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4413      	add	r3, r2
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3da      	bcc.n	8001dee <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001e38:	f000 f8e8 	bl	800200c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_FLASHEx_Erase+0xd8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	761a      	strb	r2, [r3, #24]

  return status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000230 	.word	0x20000230
 8001e50:	40023c00 	.word	0x40023c00

08001e54 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	220f      	movs	r2, #15
 8001e60:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001e62:	f000 f897 	bl	8001f94 <FLASH_OB_GetWRP>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001e6e:	f000 f89d 	bl	8001fac <FLASH_OB_GetRDP>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001e7a:	f000 f87b 	bl	8001f74 <FLASH_OB_GetUser>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001e86:	f000 f8b1 	bl	8001fec <FLASH_OB_GetBOR>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	615a      	str	r2, [r3, #20]
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <FLASH_MassErase+0x44>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <FLASH_MassErase+0x44>)
 8001eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <FLASH_MassErase+0x44>)
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <FLASH_MassErase+0x44>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <FLASH_MassErase+0x44>)
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <FLASH_MassErase+0x44>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	6113      	str	r3, [r2, #16]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e010      	b.n	8001f22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d103      	bne.n	8001f0e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e009      	b.n	8001f22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d103      	bne.n	8001f1c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e002      	b.n	8001f22 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001f1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	490f      	ldr	r1, [pc, #60]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <FLASH_Erase_Sector+0x8c>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6113      	str	r3, [r2, #16]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <FLASH_OB_GetUser+0x1c>)
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f023 031f 	bic.w	r3, r3, #31
 8001f82:	b2db      	uxtb	r3, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023c00 	.word	0x40023c00

08001f94 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <FLASH_OB_GetWRP+0x14>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40023c16 	.word	0x40023c16

08001fac <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001fb2:	23aa      	movs	r3, #170	; 0xaa
 8001fb4:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <FLASH_OB_GetRDP+0x3c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2bcc      	cmp	r3, #204	; 0xcc
 8001fbe:	d102      	bne.n	8001fc6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001fc0:	23cc      	movs	r3, #204	; 0xcc
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	e009      	b.n	8001fda <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <FLASH_OB_GetRDP+0x3c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2baa      	cmp	r3, #170	; 0xaa
 8001fce:	d102      	bne.n	8001fd6 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001fd0:	23aa      	movs	r3, #170	; 0xaa
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	e001      	b.n	8001fda <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8001fd6:	2355      	movs	r3, #85	; 0x55
 8001fd8:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40023c15 	.word	0x40023c15

08001fec <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <FLASH_OB_GetBOR+0x1c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	b2db      	uxtb	r3, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023c14 	.word	0x40023c14

0800200c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	2b00      	cmp	r3, #0
 800201a:	d017      	beq.n	800204c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <FLASH_FlushCaches+0x88>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002022:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002026:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <FLASH_FlushCaches+0x88>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <FLASH_FlushCaches+0x88>)
 800202e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <FLASH_FlushCaches+0x88>)
 800203a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800203e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a13      	ldr	r2, [pc, #76]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <FLASH_FlushCaches+0x88>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d017      	beq.n	8002088 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <FLASH_FlushCaches+0x88>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <FLASH_FlushCaches+0x88>)
 800205e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002062:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <FLASH_FlushCaches+0x88>)
 800206a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800207a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <FLASH_FlushCaches+0x88>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002086:	6013      	str	r3, [r2, #0]
  }
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	e159      	b.n	8002368 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	f040 8148 	bne.w	8002362 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d005      	beq.n	80020ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d130      	bne.n	800214c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002120:	2201      	movs	r2, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 0201 	and.w	r2, r3, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b03      	cmp	r3, #3
 8002156:	d017      	beq.n	8002188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d123      	bne.n	80021dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	220f      	movs	r2, #15
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3208      	adds	r2, #8
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0203 	and.w	r2, r3, #3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a2 	beq.w	8002362 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b57      	ldr	r3, [pc, #348]	; (8002380 <HAL_GPIO_Init+0x2e8>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a56      	ldr	r2, [pc, #344]	; (8002380 <HAL_GPIO_Init+0x2e8>)
 8002228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b54      	ldr	r3, [pc, #336]	; (8002380 <HAL_GPIO_Init+0x2e8>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800223a:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_GPIO_Init+0x2ec>)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3302      	adds	r3, #2
 8002242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a49      	ldr	r2, [pc, #292]	; (8002388 <HAL_GPIO_Init+0x2f0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0x202>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a48      	ldr	r2, [pc, #288]	; (800238c <HAL_GPIO_Init+0x2f4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x1fe>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a47      	ldr	r2, [pc, #284]	; (8002390 <HAL_GPIO_Init+0x2f8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x1fa>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a46      	ldr	r2, [pc, #280]	; (8002394 <HAL_GPIO_Init+0x2fc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x1f6>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a45      	ldr	r2, [pc, #276]	; (8002398 <HAL_GPIO_Init+0x300>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x1f2>
 8002286:	2304      	movs	r3, #4
 8002288:	e008      	b.n	800229c <HAL_GPIO_Init+0x204>
 800228a:	2307      	movs	r3, #7
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x204>
 800228e:	2303      	movs	r3, #3
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x204>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x204>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x204>
 800229a:	2300      	movs	r3, #0
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ac:	4935      	ldr	r1, [pc, #212]	; (8002384 <HAL_GPIO_Init+0x2ec>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <HAL_GPIO_Init+0x304>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022de:	4a2f      	ldr	r2, [pc, #188]	; (800239c <HAL_GPIO_Init+0x304>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_GPIO_Init+0x304>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002308:	4a24      	ldr	r2, [pc, #144]	; (800239c <HAL_GPIO_Init+0x304>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_GPIO_Init+0x304>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002332:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_GPIO_Init+0x304>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_GPIO_Init+0x304>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235c:	4a0f      	ldr	r2, [pc, #60]	; (800239c <HAL_GPIO_Init+0x304>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	f67f aea2 	bls.w	80020b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021000 	.word	0x40021000
 800239c:	40013c00 	.word	0x40013c00

080023a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e0bb      	b.n	8002534 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023bc:	2201      	movs	r2, #1
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	f040 80ab 	bne.w	800252e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80023d8:	4a5c      	ldr	r2, [pc, #368]	; (800254c <HAL_GPIO_DeInit+0x1ac>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	4013      	ands	r3, r2
 80023f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_GPIO_DeInit+0x1b0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_DeInit+0x96>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a53      	ldr	r2, [pc, #332]	; (8002554 <HAL_GPIO_DeInit+0x1b4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_DeInit+0x92>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_GPIO_DeInit+0x1b8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_DeInit+0x8e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a51      	ldr	r2, [pc, #324]	; (800255c <HAL_GPIO_DeInit+0x1bc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_DeInit+0x8a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a50      	ldr	r2, [pc, #320]	; (8002560 <HAL_GPIO_DeInit+0x1c0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_DeInit+0x86>
 8002422:	2304      	movs	r3, #4
 8002424:	e008      	b.n	8002438 <HAL_GPIO_DeInit+0x98>
 8002426:	2307      	movs	r3, #7
 8002428:	e006      	b.n	8002438 <HAL_GPIO_DeInit+0x98>
 800242a:	2303      	movs	r3, #3
 800242c:	e004      	b.n	8002438 <HAL_GPIO_DeInit+0x98>
 800242e:	2302      	movs	r3, #2
 8002430:	e002      	b.n	8002438 <HAL_GPIO_DeInit+0x98>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_GPIO_DeInit+0x98>
 8002436:	2300      	movs	r3, #0
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	f002 0203 	and.w	r2, r2, #3
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4093      	lsls	r3, r2
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	d132      	bne.n	80024ae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <HAL_GPIO_DeInit+0x1c4>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43db      	mvns	r3, r3
 8002450:	4944      	ldr	r1, [pc, #272]	; (8002564 <HAL_GPIO_DeInit+0x1c4>)
 8002452:	4013      	ands	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002456:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_GPIO_DeInit+0x1c4>)
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43db      	mvns	r3, r3
 800245e:	4941      	ldr	r1, [pc, #260]	; (8002564 <HAL_GPIO_DeInit+0x1c4>)
 8002460:	4013      	ands	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002464:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_GPIO_DeInit+0x1c4>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	493d      	ldr	r1, [pc, #244]	; (8002564 <HAL_GPIO_DeInit+0x1c4>)
 800246e:	4013      	ands	r3, r2
 8002470:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002472:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <HAL_GPIO_DeInit+0x1c4>)
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43db      	mvns	r3, r3
 800247a:	493a      	ldr	r1, [pc, #232]	; (8002564 <HAL_GPIO_DeInit+0x1c4>)
 800247c:	4013      	ands	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <HAL_GPIO_DeInit+0x1ac>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	43da      	mvns	r2, r3
 80024a0:	482a      	ldr	r0, [pc, #168]	; (800254c <HAL_GPIO_DeInit+0x1ac>)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	400a      	ands	r2, r1
 80024a8:	3302      	adds	r3, #2
 80024aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2103      	movs	r1, #3
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	401a      	ands	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	08d2      	lsrs	r2, r2, #3
 80024e4:	4019      	ands	r1, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2103      	movs	r1, #3
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	401a      	ands	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	2101      	movs	r1, #1
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2103      	movs	r1, #3
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	401a      	ands	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f af40 	bls.w	80023bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40013800 	.word	0x40013800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400
 8002558:	40020800 	.word	0x40020800
 800255c:	40020c00 	.word	0x40020c00
 8002560:	40021000 	.word	0x40021000
 8002564:	40013c00 	.word	0x40013c00

08002568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
 8002574:	4613      	mov	r3, r2
 8002576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002578:	787b      	ldrb	r3, [r7, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002584:	e003      	b.n	800258e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	041a      	lsls	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e267      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d075      	beq.n	80026a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ba:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d112      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025de:	d10b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4b7e      	ldr	r3, [pc, #504]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05b      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d157      	bne.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e242      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x74>
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6c      	ldr	r2, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002634:	4b69      	ldr	r3, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a68      	ldr	r2, [pc, #416]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b66      	ldr	r3, [pc, #408]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a65      	ldr	r2, [pc, #404]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7ff f860 	bl	8001718 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7ff f85c 	bl	8001718 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e207      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0xc0>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff f84c 	bl	8001718 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff f848 	bl	8001718 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1f3      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d063      	beq.n	800277a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d11c      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b44      	ldr	r3, [pc, #272]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1c7      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4937      	ldr	r1, [pc, #220]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	e03a      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7ff f801 	bl	8001718 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe fffd 	bl	8001718 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1a8      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4925      	ldr	r1, [pc, #148]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe ffe0 	bl	8001718 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe ffdc 	bl	8001718 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e187      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d036      	beq.n	80027f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe ffc0 	bl	8001718 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe ffbc 	bl	8001718 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e167      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x200>
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe ffa9 	bl	8001718 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e00e      	b.n	80027e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe ffa5 	bl	8001718 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d907      	bls.n	80027e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e150      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	42470000 	.word	0x42470000
 80027e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ea      	bne.n	80027ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8097 	beq.w	8002930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b7d      	ldr	r3, [pc, #500]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a7c      	ldr	r2, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b77      	ldr	r3, [pc, #476]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a73      	ldr	r2, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7fe ff65 	bl	8001718 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fe ff61 	bl	8001718 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e10c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x2ea>
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x30c>
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5e      	ldr	r2, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a5b      	ldr	r2, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	4b55      	ldr	r3, [pc, #340]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe ff26 	bl	8001718 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe ff22 	bl	8001718 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0cb      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ee      	beq.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7fe ff10 	bl	8001718 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe ff0c 	bl	8001718 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0b5      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ee      	bne.n	80028fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a1 	beq.w	8002a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293a:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	d05c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d141      	bne.n	80029d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fee0 	bl	8001718 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fedc 	bl	8001718 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e087      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe feb5 	bl	8001718 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe feb1 	bl	8001718 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e05c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x416>
 80029d0:	e054      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fe9e 	bl	8001718 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fe9a 	bl	8001718 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e045      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
 80029fe:	e03d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e038      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x4ec>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d028      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d121      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0cc      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d90c      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d044      	beq.n	8002bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d119      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e06f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e067      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4934      	ldr	r1, [pc, #208]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7fe fdcc 	bl	8001718 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fe fdc8 	bl	8001718 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d20c      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fd2c 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08004680 	.word	0x08004680
 8002c50:	2000000c 	.word	0x2000000c
 8002c54:	20000010 	.word	0x20000010

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b090      	sub	sp, #64	; 0x40
 8002c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
 8002c64:	2300      	movs	r3, #0
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c68:	2300      	movs	r3, #0
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c70:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d00d      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	f200 80a1 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c8a:	e09b      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x184>)
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c90:	e09b      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c92:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c96:	e098      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c98:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca2:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d028      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	627a      	str	r2, [r7, #36]	; 0x24
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc4:	fb03 f201 	mul.w	r2, r3, r1
 8002cc8:	2300      	movs	r3, #0
 8002cca:	fb00 f303 	mul.w	r3, r0, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	4a43      	ldr	r2, [pc, #268]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd2:	fba0 1202 	umull	r1, r2, r0, r2
 8002cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cd8:	460a      	mov	r2, r1
 8002cda:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cde:	4413      	add	r3, r2
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	61fa      	str	r2, [r7, #28]
 8002cea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cf2:	f7fd fac5 	bl	8000280 <__aeabi_uldivmod>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfe:	e053      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d00:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	2200      	movs	r2, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	617a      	str	r2, [r7, #20]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d12:	f04f 0b00 	mov.w	fp, #0
 8002d16:	4652      	mov	r2, sl
 8002d18:	465b      	mov	r3, fp
 8002d1a:	f04f 0000 	mov.w	r0, #0
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	0159      	lsls	r1, r3, #5
 8002d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d28:	0150      	lsls	r0, r2, #5
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d32:	eb63 090b 	sbc.w	r9, r3, fp
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d4a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d4e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	00eb      	lsls	r3, r5, #3
 8002d5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d60:	00e2      	lsls	r2, r4, #3
 8002d62:	4614      	mov	r4, r2
 8002d64:	461d      	mov	r5, r3
 8002d66:	eb14 030a 	adds.w	r3, r4, sl
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	eb45 030b 	adc.w	r3, r5, fp
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	028b      	lsls	r3, r1, #10
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d88:	4621      	mov	r1, r4
 8002d8a:	028a      	lsls	r2, r1, #10
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	2200      	movs	r2, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	60fa      	str	r2, [r7, #12]
 8002d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d9c:	f7fd fa70 	bl	8000280 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	3301      	adds	r3, #1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x184>)
 8002dc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3740      	adds	r7, #64	; 0x40
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	00f42400 	.word	0x00f42400
 8002de0:	017d7840 	.word	0x017d7840

08002de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	2000000c 	.word	0x2000000c

08002dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e00:	f7ff fff0 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0a9b      	lsrs	r3, r3, #10
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4903      	ldr	r1, [pc, #12]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08004690 	.word	0x08004690

08002e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e28:	f7ff ffdc 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0b5b      	lsrs	r3, r3, #13
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08004690 	.word	0x08004690

08002e4c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e52:	f7fe fc61 	bl	8001718 <HAL_GetTick>
 8002e56:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e58:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5c      	ldr	r2, [pc, #368]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fc57 	bl	8001718 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e0a7      	b.n	8002fc8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e78:	4b55      	ldr	r3, [pc, #340]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002e84:	4b52      	ldr	r3, [pc, #328]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a51      	ldr	r2, [pc, #324]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e90:	f7fe fc42 	bl	8001718 <HAL_GetTick>
 8002e94:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002e96:	4b4e      	ldr	r3, [pc, #312]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9e:	f7fe fc3b 	bl	8001718 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e089      	b.n	8002fc8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002eb4:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ee      	bne.n	8002e9e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ec0:	f7fe fc2a 	bl	8001718 <HAL_GetTick>
 8002ec4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002ec6:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a41      	ldr	r2, [pc, #260]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002ecc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fc20 	bl	8001718 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e070      	b.n	8002fc8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ef2:	f7fe fc11 	bl	8001718 <HAL_GetTick>
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a34      	ldr	r2, [pc, #208]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f02:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f06:	f7fe fc07 	bl	8001718 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e057      	b.n	8002fc8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f24:	f7fe fbf8 	bl	8001718 <HAL_GetTick>
 8002f28:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002f2a:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f34:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f38:	f7fe fbee 	bl	8001718 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e03e      	b.n	8002fc8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f58:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_RCC_DeInit+0x188>)
 8002f5a:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f5e:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <HAL_RCC_DeInit+0x18c>)
 8002f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f6a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002f6e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f7a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f82:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002f86:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f92:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_RCC_DeInit+0x184>)
 8002fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002faa:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_DeInit+0x190>)
 8002fae:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_RCC_DeInit+0x194>)
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCC_DeInit+0x198>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fb6a 	bl	8001690 <HAL_InitTick>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	04003010 	.word	0x04003010
 8002fd8:	20003000 	.word	0x20003000
 8002fdc:	2000000c 	.word	0x2000000c
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	20000010 	.word	0x20000010

08002fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e03f      	b.n	800307a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe fa46 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f9f9 	bl	8003424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e021      	b.n	80030d8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	; 0x24
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030aa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fe fa73 	bl	8001598 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d17c      	bne.n	80031fa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Transmit+0x2c>
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e075      	b.n	80031fc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_UART_Transmit+0x3e>
 800311a:	2302      	movs	r3, #2
 800311c:	e06e      	b.n	80031fc <HAL_UART_Transmit+0x11c>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2221      	movs	r2, #33	; 0x21
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003134:	f7fe faf0 	bl	8001718 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314e:	d108      	bne.n	8003162 <HAL_UART_Transmit+0x82>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	e003      	b.n	800316a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003172:	e02a      	b.n	80031ca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2200      	movs	r2, #0
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f8e2 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e036      	b.n	80031fc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	3302      	adds	r3, #2
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	e007      	b.n	80031bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1cf      	bne.n	8003174 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	2140      	movs	r1, #64	; 0x40
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f8b2 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e006      	b.n	80031fc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b20      	cmp	r3, #32
 8003222:	f040 808c 	bne.w	800333e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_Receive+0x2e>
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e084      	b.n	8003340 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_UART_Receive+0x40>
 8003240:	2302      	movs	r3, #2
 8003242:	e07d      	b.n	8003340 <HAL_UART_Receive+0x13c>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2222      	movs	r2, #34	; 0x22
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003260:	f7fe fa5a 	bl	8001718 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327a:	d108      	bne.n	800328e <HAL_UART_Receive+0x8a>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	e003      	b.n	8003296 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800329e:	e043      	b.n	8003328 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2200      	movs	r2, #0
 80032a8:	2120      	movs	r1, #32
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f84c 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e042      	b.n	8003340 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10c      	bne.n	80032da <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	3302      	adds	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e01f      	b.n	800331a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d007      	beq.n	80032f4 <HAL_UART_Receive+0xf0>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <HAL_UART_Receive+0xfe>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e008      	b.n	8003314 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800330e:	b2da      	uxtb	r2, r3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1b6      	bne.n	80032a0 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
  }
}
 8003340:	4618      	mov	r0, r3
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b090      	sub	sp, #64	; 0x40
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003358:	e050      	b.n	80033fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d04c      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <UART_WaitOnFlagUntilTimeout+0x30>
 8003368:	f7fe f9d6 	bl	8001718 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003374:	429a      	cmp	r2, r3
 8003376:	d241      	bcs.n	80033fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003398:	637a      	str	r2, [r7, #52]	; 0x34
 800339a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800339e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e5      	bne.n	8003378 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	613b      	str	r3, [r7, #16]
   return(result);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033cc:	623a      	str	r2, [r7, #32]
 80033ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	69f9      	ldr	r1, [r7, #28]
 80033d2:	6a3a      	ldr	r2, [r7, #32]
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e00f      	b.n	800341c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	d09f      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3740      	adds	r7, #64	; 0x40
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b0c0      	sub	sp, #256	; 0x100
 800342a:	af00      	add	r7, sp, #0
 800342c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	68d9      	ldr	r1, [r3, #12]
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	ea40 0301 	orr.w	r3, r0, r1
 800344c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	431a      	orrs	r2, r3
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800347c:	f021 010c 	bic.w	r1, r1, #12
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800348a:	430b      	orrs	r3, r1
 800348c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349e:	6999      	ldr	r1, [r3, #24]
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	ea40 0301 	orr.w	r3, r0, r1
 80034aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b8f      	ldr	r3, [pc, #572]	; (80036f0 <UART_SetConfig+0x2cc>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d005      	beq.n	80034c4 <UART_SetConfig+0xa0>
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b8d      	ldr	r3, [pc, #564]	; (80036f4 <UART_SetConfig+0x2d0>)
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d104      	bne.n	80034ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c4:	f7ff fcae 	bl	8002e24 <HAL_RCC_GetPCLK2Freq>
 80034c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034cc:	e003      	b.n	80034d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ce:	f7ff fc95 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 80034d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e0:	f040 810c 	bne.w	80036fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034f6:	4622      	mov	r2, r4
 80034f8:	462b      	mov	r3, r5
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80034fe:	415b      	adcs	r3, r3
 8003500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003502:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003506:	4621      	mov	r1, r4
 8003508:	eb12 0801 	adds.w	r8, r2, r1
 800350c:	4629      	mov	r1, r5
 800350e:	eb43 0901 	adc.w	r9, r3, r1
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800351e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003526:	4690      	mov	r8, r2
 8003528:	4699      	mov	r9, r3
 800352a:	4623      	mov	r3, r4
 800352c:	eb18 0303 	adds.w	r3, r8, r3
 8003530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003534:	462b      	mov	r3, r5
 8003536:	eb49 0303 	adc.w	r3, r9, r3
 800353a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800354a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800354e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003552:	460b      	mov	r3, r1
 8003554:	18db      	adds	r3, r3, r3
 8003556:	653b      	str	r3, [r7, #80]	; 0x50
 8003558:	4613      	mov	r3, r2
 800355a:	eb42 0303 	adc.w	r3, r2, r3
 800355e:	657b      	str	r3, [r7, #84]	; 0x54
 8003560:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003564:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003568:	f7fc fe8a 	bl	8000280 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <UART_SetConfig+0x2d4>)
 8003572:	fba3 2302 	umull	r2, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	011c      	lsls	r4, r3, #4
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003584:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003588:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	64b9      	str	r1, [r7, #72]	; 0x48
 8003594:	415b      	adcs	r3, r3
 8003596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003598:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800359c:	4641      	mov	r1, r8
 800359e:	eb12 0a01 	adds.w	sl, r2, r1
 80035a2:	4649      	mov	r1, r9
 80035a4:	eb43 0b01 	adc.w	fp, r3, r1
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035bc:	4692      	mov	sl, r2
 80035be:	469b      	mov	fp, r3
 80035c0:	4643      	mov	r3, r8
 80035c2:	eb1a 0303 	adds.w	r3, sl, r3
 80035c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ca:	464b      	mov	r3, r9
 80035cc:	eb4b 0303 	adc.w	r3, fp, r3
 80035d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035e8:	460b      	mov	r3, r1
 80035ea:	18db      	adds	r3, r3, r3
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
 80035ee:	4613      	mov	r3, r2
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
 80035f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035fe:	f7fc fe3f 	bl	8000280 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4611      	mov	r1, r2
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <UART_SetConfig+0x2d4>)
 800360a:	fba3 2301 	umull	r2, r3, r3, r1
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2264      	movs	r2, #100	; 0x64
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	1acb      	subs	r3, r1, r3
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <UART_SetConfig+0x2d4>)
 8003620:	fba3 2302 	umull	r2, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800362c:	441c      	add	r4, r3
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003638:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800363c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	63b9      	str	r1, [r7, #56]	; 0x38
 8003648:	415b      	adcs	r3, r3
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6339      	str	r1, [r7, #48]	; 0x30
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003684:	464b      	mov	r3, r9
 8003686:	460a      	mov	r2, r1
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800369c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036a4:	460b      	mov	r3, r1
 80036a6:	18db      	adds	r3, r3, r3
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036aa:	4613      	mov	r3, r2
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036ba:	f7fc fde1 	bl	8000280 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <UART_SetConfig+0x2d4>)
 80036c4:	fba3 1302 	umull	r1, r3, r3, r2
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	2164      	movs	r1, #100	; 0x64
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	3332      	adds	r3, #50	; 0x32
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <UART_SetConfig+0x2d4>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	f003 0207 	and.w	r2, r3, #7
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4422      	add	r2, r4
 80036ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036ec:	e105      	b.n	80038fa <UART_SetConfig+0x4d6>
 80036ee:	bf00      	nop
 80036f0:	40011000 	.word	0x40011000
 80036f4:	40011400 	.word	0x40011400
 80036f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003706:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800370a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800370e:	4642      	mov	r2, r8
 8003710:	464b      	mov	r3, r9
 8003712:	1891      	adds	r1, r2, r2
 8003714:	6239      	str	r1, [r7, #32]
 8003716:	415b      	adcs	r3, r3
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800371e:	4641      	mov	r1, r8
 8003720:	1854      	adds	r4, r2, r1
 8003722:	4649      	mov	r1, r9
 8003724:	eb43 0501 	adc.w	r5, r3, r1
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	00eb      	lsls	r3, r5, #3
 8003732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003736:	00e2      	lsls	r2, r4, #3
 8003738:	4614      	mov	r4, r2
 800373a:	461d      	mov	r5, r3
 800373c:	4643      	mov	r3, r8
 800373e:	18e3      	adds	r3, r4, r3
 8003740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003744:	464b      	mov	r3, r9
 8003746:	eb45 0303 	adc.w	r3, r5, r3
 800374a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800375a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800376a:	4629      	mov	r1, r5
 800376c:	008b      	lsls	r3, r1, #2
 800376e:	4621      	mov	r1, r4
 8003770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003774:	4621      	mov	r1, r4
 8003776:	008a      	lsls	r2, r1, #2
 8003778:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800377c:	f7fc fd80 	bl	8000280 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4b60      	ldr	r3, [pc, #384]	; (8003908 <UART_SetConfig+0x4e4>)
 8003786:	fba3 2302 	umull	r2, r3, r3, r2
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	011c      	lsls	r4, r3, #4
 800378e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003798:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800379c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	61b9      	str	r1, [r7, #24]
 80037a8:	415b      	adcs	r3, r3
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6139      	str	r1, [r7, #16]
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037e4:	464b      	mov	r3, r9
 80037e6:	460a      	mov	r2, r1
 80037e8:	eb42 0303 	adc.w	r3, r2, r3
 80037ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003808:	4649      	mov	r1, r9
 800380a:	008b      	lsls	r3, r1, #2
 800380c:	4641      	mov	r1, r8
 800380e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003812:	4641      	mov	r1, r8
 8003814:	008a      	lsls	r2, r1, #2
 8003816:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800381a:	f7fc fd31 	bl	8000280 <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4b39      	ldr	r3, [pc, #228]	; (8003908 <UART_SetConfig+0x4e4>)
 8003824:	fba3 1302 	umull	r1, r3, r3, r2
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	2164      	movs	r1, #100	; 0x64
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	3332      	adds	r3, #50	; 0x32
 8003836:	4a34      	ldr	r2, [pc, #208]	; (8003908 <UART_SetConfig+0x4e4>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003842:	441c      	add	r4, r3
 8003844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003848:	2200      	movs	r2, #0
 800384a:	673b      	str	r3, [r7, #112]	; 0x70
 800384c:	677a      	str	r2, [r7, #116]	; 0x74
 800384e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003852:	4642      	mov	r2, r8
 8003854:	464b      	mov	r3, r9
 8003856:	1891      	adds	r1, r2, r2
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	415b      	adcs	r3, r3
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003862:	4641      	mov	r1, r8
 8003864:	1851      	adds	r1, r2, r1
 8003866:	6039      	str	r1, [r7, #0]
 8003868:	4649      	mov	r1, r9
 800386a:	414b      	adcs	r3, r1
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800387a:	4659      	mov	r1, fp
 800387c:	00cb      	lsls	r3, r1, #3
 800387e:	4651      	mov	r1, sl
 8003880:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003884:	4651      	mov	r1, sl
 8003886:	00ca      	lsls	r2, r1, #3
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	4603      	mov	r3, r0
 800388e:	4642      	mov	r2, r8
 8003890:	189b      	adds	r3, r3, r2
 8003892:	66bb      	str	r3, [r7, #104]	; 0x68
 8003894:	464b      	mov	r3, r9
 8003896:	460a      	mov	r2, r1
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	663b      	str	r3, [r7, #96]	; 0x60
 80038a8:	667a      	str	r2, [r7, #100]	; 0x64
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038b6:	4649      	mov	r1, r9
 80038b8:	008b      	lsls	r3, r1, #2
 80038ba:	4641      	mov	r1, r8
 80038bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c0:	4641      	mov	r1, r8
 80038c2:	008a      	lsls	r2, r1, #2
 80038c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038c8:	f7fc fcda 	bl	8000280 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <UART_SetConfig+0x4e4>)
 80038d2:	fba3 1302 	umull	r1, r3, r3, r2
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2164      	movs	r1, #100	; 0x64
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	3332      	adds	r3, #50	; 0x32
 80038e4:	4a08      	ldr	r2, [pc, #32]	; (8003908 <UART_SetConfig+0x4e4>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	f003 020f 	and.w	r2, r3, #15
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4422      	add	r2, r4
 80038f8:	609a      	str	r2, [r3, #8]
}
 80038fa:	bf00      	nop
 80038fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003906:	bf00      	nop
 8003908:	51eb851f 	.word	0x51eb851f

0800390c <__errno>:
 800390c:	4b01      	ldr	r3, [pc, #4]	; (8003914 <__errno+0x8>)
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000018 	.word	0x20000018

08003918 <__libc_init_array>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	4d0d      	ldr	r5, [pc, #52]	; (8003950 <__libc_init_array+0x38>)
 800391c:	4c0d      	ldr	r4, [pc, #52]	; (8003954 <__libc_init_array+0x3c>)
 800391e:	1b64      	subs	r4, r4, r5
 8003920:	10a4      	asrs	r4, r4, #2
 8003922:	2600      	movs	r6, #0
 8003924:	42a6      	cmp	r6, r4
 8003926:	d109      	bne.n	800393c <__libc_init_array+0x24>
 8003928:	4d0b      	ldr	r5, [pc, #44]	; (8003958 <__libc_init_array+0x40>)
 800392a:	4c0c      	ldr	r4, [pc, #48]	; (800395c <__libc_init_array+0x44>)
 800392c:	f000 fc8e 	bl	800424c <_init>
 8003930:	1b64      	subs	r4, r4, r5
 8003932:	10a4      	asrs	r4, r4, #2
 8003934:	2600      	movs	r6, #0
 8003936:	42a6      	cmp	r6, r4
 8003938:	d105      	bne.n	8003946 <__libc_init_array+0x2e>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003940:	4798      	blx	r3
 8003942:	3601      	adds	r6, #1
 8003944:	e7ee      	b.n	8003924 <__libc_init_array+0xc>
 8003946:	f855 3b04 	ldr.w	r3, [r5], #4
 800394a:	4798      	blx	r3
 800394c:	3601      	adds	r6, #1
 800394e:	e7f2      	b.n	8003936 <__libc_init_array+0x1e>
 8003950:	080046d4 	.word	0x080046d4
 8003954:	080046d4 	.word	0x080046d4
 8003958:	080046d4 	.word	0x080046d4
 800395c:	080046d8 	.word	0x080046d8

08003960 <memset>:
 8003960:	4402      	add	r2, r0
 8003962:	4603      	mov	r3, r0
 8003964:	4293      	cmp	r3, r2
 8003966:	d100      	bne.n	800396a <memset+0xa>
 8003968:	4770      	bx	lr
 800396a:	f803 1b01 	strb.w	r1, [r3], #1
 800396e:	e7f9      	b.n	8003964 <memset+0x4>

08003970 <_vsiprintf_r>:
 8003970:	b500      	push	{lr}
 8003972:	b09b      	sub	sp, #108	; 0x6c
 8003974:	9100      	str	r1, [sp, #0]
 8003976:	9104      	str	r1, [sp, #16]
 8003978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800397c:	9105      	str	r1, [sp, #20]
 800397e:	9102      	str	r1, [sp, #8]
 8003980:	4905      	ldr	r1, [pc, #20]	; (8003998 <_vsiprintf_r+0x28>)
 8003982:	9103      	str	r1, [sp, #12]
 8003984:	4669      	mov	r1, sp
 8003986:	f000 f86f 	bl	8003a68 <_svfiprintf_r>
 800398a:	9b00      	ldr	r3, [sp, #0]
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	b01b      	add	sp, #108	; 0x6c
 8003992:	f85d fb04 	ldr.w	pc, [sp], #4
 8003996:	bf00      	nop
 8003998:	ffff0208 	.word	0xffff0208

0800399c <vsiprintf>:
 800399c:	4613      	mov	r3, r2
 800399e:	460a      	mov	r2, r1
 80039a0:	4601      	mov	r1, r0
 80039a2:	4802      	ldr	r0, [pc, #8]	; (80039ac <vsiprintf+0x10>)
 80039a4:	6800      	ldr	r0, [r0, #0]
 80039a6:	f7ff bfe3 	b.w	8003970 <_vsiprintf_r>
 80039aa:	bf00      	nop
 80039ac:	20000018 	.word	0x20000018

080039b0 <__ssputs_r>:
 80039b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b4:	688e      	ldr	r6, [r1, #8]
 80039b6:	429e      	cmp	r6, r3
 80039b8:	4682      	mov	sl, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	4690      	mov	r8, r2
 80039be:	461f      	mov	r7, r3
 80039c0:	d838      	bhi.n	8003a34 <__ssputs_r+0x84>
 80039c2:	898a      	ldrh	r2, [r1, #12]
 80039c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039c8:	d032      	beq.n	8003a30 <__ssputs_r+0x80>
 80039ca:	6825      	ldr	r5, [r4, #0]
 80039cc:	6909      	ldr	r1, [r1, #16]
 80039ce:	eba5 0901 	sub.w	r9, r5, r1
 80039d2:	6965      	ldr	r5, [r4, #20]
 80039d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039dc:	3301      	adds	r3, #1
 80039de:	444b      	add	r3, r9
 80039e0:	106d      	asrs	r5, r5, #1
 80039e2:	429d      	cmp	r5, r3
 80039e4:	bf38      	it	cc
 80039e6:	461d      	movcc	r5, r3
 80039e8:	0553      	lsls	r3, r2, #21
 80039ea:	d531      	bpl.n	8003a50 <__ssputs_r+0xa0>
 80039ec:	4629      	mov	r1, r5
 80039ee:	f000 fb63 	bl	80040b8 <_malloc_r>
 80039f2:	4606      	mov	r6, r0
 80039f4:	b950      	cbnz	r0, 8003a0c <__ssputs_r+0x5c>
 80039f6:	230c      	movs	r3, #12
 80039f8:	f8ca 3000 	str.w	r3, [sl]
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a0c:	6921      	ldr	r1, [r4, #16]
 8003a0e:	464a      	mov	r2, r9
 8003a10:	f000 fabe 	bl	8003f90 <memcpy>
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	6126      	str	r6, [r4, #16]
 8003a22:	6165      	str	r5, [r4, #20]
 8003a24:	444e      	add	r6, r9
 8003a26:	eba5 0509 	sub.w	r5, r5, r9
 8003a2a:	6026      	str	r6, [r4, #0]
 8003a2c:	60a5      	str	r5, [r4, #8]
 8003a2e:	463e      	mov	r6, r7
 8003a30:	42be      	cmp	r6, r7
 8003a32:	d900      	bls.n	8003a36 <__ssputs_r+0x86>
 8003a34:	463e      	mov	r6, r7
 8003a36:	6820      	ldr	r0, [r4, #0]
 8003a38:	4632      	mov	r2, r6
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	f000 fab6 	bl	8003fac <memmove>
 8003a40:	68a3      	ldr	r3, [r4, #8]
 8003a42:	1b9b      	subs	r3, r3, r6
 8003a44:	60a3      	str	r3, [r4, #8]
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	4433      	add	r3, r6
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	e7db      	b.n	8003a08 <__ssputs_r+0x58>
 8003a50:	462a      	mov	r2, r5
 8003a52:	f000 fba5 	bl	80041a0 <_realloc_r>
 8003a56:	4606      	mov	r6, r0
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d1e1      	bne.n	8003a20 <__ssputs_r+0x70>
 8003a5c:	6921      	ldr	r1, [r4, #16]
 8003a5e:	4650      	mov	r0, sl
 8003a60:	f000 fabe 	bl	8003fe0 <_free_r>
 8003a64:	e7c7      	b.n	80039f6 <__ssputs_r+0x46>
	...

08003a68 <_svfiprintf_r>:
 8003a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	4698      	mov	r8, r3
 8003a6e:	898b      	ldrh	r3, [r1, #12]
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	b09d      	sub	sp, #116	; 0x74
 8003a74:	4607      	mov	r7, r0
 8003a76:	460d      	mov	r5, r1
 8003a78:	4614      	mov	r4, r2
 8003a7a:	d50e      	bpl.n	8003a9a <_svfiprintf_r+0x32>
 8003a7c:	690b      	ldr	r3, [r1, #16]
 8003a7e:	b963      	cbnz	r3, 8003a9a <_svfiprintf_r+0x32>
 8003a80:	2140      	movs	r1, #64	; 0x40
 8003a82:	f000 fb19 	bl	80040b8 <_malloc_r>
 8003a86:	6028      	str	r0, [r5, #0]
 8003a88:	6128      	str	r0, [r5, #16]
 8003a8a:	b920      	cbnz	r0, 8003a96 <_svfiprintf_r+0x2e>
 8003a8c:	230c      	movs	r3, #12
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295
 8003a94:	e0d1      	b.n	8003c3a <_svfiprintf_r+0x1d2>
 8003a96:	2340      	movs	r3, #64	; 0x40
 8003a98:	616b      	str	r3, [r5, #20]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aa8:	2330      	movs	r3, #48	; 0x30
 8003aaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c54 <_svfiprintf_r+0x1ec>
 8003aae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ab2:	f04f 0901 	mov.w	r9, #1
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	469a      	mov	sl, r3
 8003aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003abe:	b10a      	cbz	r2, 8003ac4 <_svfiprintf_r+0x5c>
 8003ac0:	2a25      	cmp	r2, #37	; 0x25
 8003ac2:	d1f9      	bne.n	8003ab8 <_svfiprintf_r+0x50>
 8003ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ac8:	d00b      	beq.n	8003ae2 <_svfiprintf_r+0x7a>
 8003aca:	465b      	mov	r3, fp
 8003acc:	4622      	mov	r2, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f7ff ff6d 	bl	80039b0 <__ssputs_r>
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	f000 80aa 	beq.w	8003c30 <_svfiprintf_r+0x1c8>
 8003adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ade:	445a      	add	r2, fp
 8003ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80a2 	beq.w	8003c30 <_svfiprintf_r+0x1c8>
 8003aec:	2300      	movs	r3, #0
 8003aee:	f04f 32ff 	mov.w	r2, #4294967295
 8003af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003af6:	f10a 0a01 	add.w	sl, sl, #1
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	9307      	str	r3, [sp, #28]
 8003afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b02:	931a      	str	r3, [sp, #104]	; 0x68
 8003b04:	4654      	mov	r4, sl
 8003b06:	2205      	movs	r2, #5
 8003b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b0c:	4851      	ldr	r0, [pc, #324]	; (8003c54 <_svfiprintf_r+0x1ec>)
 8003b0e:	f7fc fb67 	bl	80001e0 <memchr>
 8003b12:	9a04      	ldr	r2, [sp, #16]
 8003b14:	b9d8      	cbnz	r0, 8003b4e <_svfiprintf_r+0xe6>
 8003b16:	06d0      	lsls	r0, r2, #27
 8003b18:	bf44      	itt	mi
 8003b1a:	2320      	movmi	r3, #32
 8003b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b20:	0711      	lsls	r1, r2, #28
 8003b22:	bf44      	itt	mi
 8003b24:	232b      	movmi	r3, #43	; 0x2b
 8003b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b30:	d015      	beq.n	8003b5e <_svfiprintf_r+0xf6>
 8003b32:	9a07      	ldr	r2, [sp, #28]
 8003b34:	4654      	mov	r4, sl
 8003b36:	2000      	movs	r0, #0
 8003b38:	f04f 0c0a 	mov.w	ip, #10
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b42:	3b30      	subs	r3, #48	; 0x30
 8003b44:	2b09      	cmp	r3, #9
 8003b46:	d94e      	bls.n	8003be6 <_svfiprintf_r+0x17e>
 8003b48:	b1b0      	cbz	r0, 8003b78 <_svfiprintf_r+0x110>
 8003b4a:	9207      	str	r2, [sp, #28]
 8003b4c:	e014      	b.n	8003b78 <_svfiprintf_r+0x110>
 8003b4e:	eba0 0308 	sub.w	r3, r0, r8
 8003b52:	fa09 f303 	lsl.w	r3, r9, r3
 8003b56:	4313      	orrs	r3, r2
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	46a2      	mov	sl, r4
 8003b5c:	e7d2      	b.n	8003b04 <_svfiprintf_r+0x9c>
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	1d19      	adds	r1, r3, #4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	9103      	str	r1, [sp, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	bfbb      	ittet	lt
 8003b6a:	425b      	neglt	r3, r3
 8003b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b70:	9307      	strge	r3, [sp, #28]
 8003b72:	9307      	strlt	r3, [sp, #28]
 8003b74:	bfb8      	it	lt
 8003b76:	9204      	strlt	r2, [sp, #16]
 8003b78:	7823      	ldrb	r3, [r4, #0]
 8003b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b7c:	d10c      	bne.n	8003b98 <_svfiprintf_r+0x130>
 8003b7e:	7863      	ldrb	r3, [r4, #1]
 8003b80:	2b2a      	cmp	r3, #42	; 0x2a
 8003b82:	d135      	bne.n	8003bf0 <_svfiprintf_r+0x188>
 8003b84:	9b03      	ldr	r3, [sp, #12]
 8003b86:	1d1a      	adds	r2, r3, #4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	9203      	str	r2, [sp, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bfb8      	it	lt
 8003b90:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b94:	3402      	adds	r4, #2
 8003b96:	9305      	str	r3, [sp, #20]
 8003b98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c64 <_svfiprintf_r+0x1fc>
 8003b9c:	7821      	ldrb	r1, [r4, #0]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	4650      	mov	r0, sl
 8003ba2:	f7fc fb1d 	bl	80001e0 <memchr>
 8003ba6:	b140      	cbz	r0, 8003bba <_svfiprintf_r+0x152>
 8003ba8:	2340      	movs	r3, #64	; 0x40
 8003baa:	eba0 000a 	sub.w	r0, r0, sl
 8003bae:	fa03 f000 	lsl.w	r0, r3, r0
 8003bb2:	9b04      	ldr	r3, [sp, #16]
 8003bb4:	4303      	orrs	r3, r0
 8003bb6:	3401      	adds	r4, #1
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bbe:	4826      	ldr	r0, [pc, #152]	; (8003c58 <_svfiprintf_r+0x1f0>)
 8003bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bc4:	2206      	movs	r2, #6
 8003bc6:	f7fc fb0b 	bl	80001e0 <memchr>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d038      	beq.n	8003c40 <_svfiprintf_r+0x1d8>
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <_svfiprintf_r+0x1f4>)
 8003bd0:	bb1b      	cbnz	r3, 8003c1a <_svfiprintf_r+0x1b2>
 8003bd2:	9b03      	ldr	r3, [sp, #12]
 8003bd4:	3307      	adds	r3, #7
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
 8003bda:	3308      	adds	r3, #8
 8003bdc:	9303      	str	r3, [sp, #12]
 8003bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be0:	4433      	add	r3, r6
 8003be2:	9309      	str	r3, [sp, #36]	; 0x24
 8003be4:	e767      	b.n	8003ab6 <_svfiprintf_r+0x4e>
 8003be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bea:	460c      	mov	r4, r1
 8003bec:	2001      	movs	r0, #1
 8003bee:	e7a5      	b.n	8003b3c <_svfiprintf_r+0xd4>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	3401      	adds	r4, #1
 8003bf4:	9305      	str	r3, [sp, #20]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f04f 0c0a 	mov.w	ip, #10
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c02:	3a30      	subs	r2, #48	; 0x30
 8003c04:	2a09      	cmp	r2, #9
 8003c06:	d903      	bls.n	8003c10 <_svfiprintf_r+0x1a8>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0c5      	beq.n	8003b98 <_svfiprintf_r+0x130>
 8003c0c:	9105      	str	r1, [sp, #20]
 8003c0e:	e7c3      	b.n	8003b98 <_svfiprintf_r+0x130>
 8003c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c14:	4604      	mov	r4, r0
 8003c16:	2301      	movs	r3, #1
 8003c18:	e7f0      	b.n	8003bfc <_svfiprintf_r+0x194>
 8003c1a:	ab03      	add	r3, sp, #12
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	462a      	mov	r2, r5
 8003c20:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <_svfiprintf_r+0x1f8>)
 8003c22:	a904      	add	r1, sp, #16
 8003c24:	4638      	mov	r0, r7
 8003c26:	f3af 8000 	nop.w
 8003c2a:	1c42      	adds	r2, r0, #1
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	d1d6      	bne.n	8003bde <_svfiprintf_r+0x176>
 8003c30:	89ab      	ldrh	r3, [r5, #12]
 8003c32:	065b      	lsls	r3, r3, #25
 8003c34:	f53f af2c 	bmi.w	8003a90 <_svfiprintf_r+0x28>
 8003c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c3a:	b01d      	add	sp, #116	; 0x74
 8003c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c40:	ab03      	add	r3, sp, #12
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	462a      	mov	r2, r5
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <_svfiprintf_r+0x1f8>)
 8003c48:	a904      	add	r1, sp, #16
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	f000 f87a 	bl	8003d44 <_printf_i>
 8003c50:	e7eb      	b.n	8003c2a <_svfiprintf_r+0x1c2>
 8003c52:	bf00      	nop
 8003c54:	08004698 	.word	0x08004698
 8003c58:	080046a2 	.word	0x080046a2
 8003c5c:	00000000 	.word	0x00000000
 8003c60:	080039b1 	.word	0x080039b1
 8003c64:	0800469e 	.word	0x0800469e

08003c68 <_printf_common>:
 8003c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	4699      	mov	r9, r3
 8003c70:	688a      	ldr	r2, [r1, #8]
 8003c72:	690b      	ldr	r3, [r1, #16]
 8003c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bfb8      	it	lt
 8003c7c:	4613      	movlt	r3, r2
 8003c7e:	6033      	str	r3, [r6, #0]
 8003c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c84:	4607      	mov	r7, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	b10a      	cbz	r2, 8003c8e <_printf_common+0x26>
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	6033      	str	r3, [r6, #0]
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	0699      	lsls	r1, r3, #26
 8003c92:	bf42      	ittt	mi
 8003c94:	6833      	ldrmi	r3, [r6, #0]
 8003c96:	3302      	addmi	r3, #2
 8003c98:	6033      	strmi	r3, [r6, #0]
 8003c9a:	6825      	ldr	r5, [r4, #0]
 8003c9c:	f015 0506 	ands.w	r5, r5, #6
 8003ca0:	d106      	bne.n	8003cb0 <_printf_common+0x48>
 8003ca2:	f104 0a19 	add.w	sl, r4, #25
 8003ca6:	68e3      	ldr	r3, [r4, #12]
 8003ca8:	6832      	ldr	r2, [r6, #0]
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	42ab      	cmp	r3, r5
 8003cae:	dc26      	bgt.n	8003cfe <_printf_common+0x96>
 8003cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cb4:	1e13      	subs	r3, r2, #0
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	bf18      	it	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	0692      	lsls	r2, r2, #26
 8003cbe:	d42b      	bmi.n	8003d18 <_printf_common+0xb0>
 8003cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	47c0      	blx	r8
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d01e      	beq.n	8003d0c <_printf_common+0xa4>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	68e5      	ldr	r5, [r4, #12]
 8003cd2:	6832      	ldr	r2, [r6, #0]
 8003cd4:	f003 0306 	and.w	r3, r3, #6
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	bf08      	it	eq
 8003cdc:	1aad      	subeq	r5, r5, r2
 8003cde:	68a3      	ldr	r3, [r4, #8]
 8003ce0:	6922      	ldr	r2, [r4, #16]
 8003ce2:	bf0c      	ite	eq
 8003ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ce8:	2500      	movne	r5, #0
 8003cea:	4293      	cmp	r3, r2
 8003cec:	bfc4      	itt	gt
 8003cee:	1a9b      	subgt	r3, r3, r2
 8003cf0:	18ed      	addgt	r5, r5, r3
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	341a      	adds	r4, #26
 8003cf6:	42b5      	cmp	r5, r6
 8003cf8:	d11a      	bne.n	8003d30 <_printf_common+0xc8>
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e008      	b.n	8003d10 <_printf_common+0xa8>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	4652      	mov	r2, sl
 8003d02:	4649      	mov	r1, r9
 8003d04:	4638      	mov	r0, r7
 8003d06:	47c0      	blx	r8
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d103      	bne.n	8003d14 <_printf_common+0xac>
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d14:	3501      	adds	r5, #1
 8003d16:	e7c6      	b.n	8003ca6 <_printf_common+0x3e>
 8003d18:	18e1      	adds	r1, r4, r3
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	2030      	movs	r0, #48	; 0x30
 8003d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d22:	4422      	add	r2, r4
 8003d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	e7c7      	b.n	8003cc0 <_printf_common+0x58>
 8003d30:	2301      	movs	r3, #1
 8003d32:	4622      	mov	r2, r4
 8003d34:	4649      	mov	r1, r9
 8003d36:	4638      	mov	r0, r7
 8003d38:	47c0      	blx	r8
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	d0e6      	beq.n	8003d0c <_printf_common+0xa4>
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7d9      	b.n	8003cf6 <_printf_common+0x8e>
	...

08003d44 <_printf_i>:
 8003d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	7e0f      	ldrb	r7, [r1, #24]
 8003d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d4c:	2f78      	cmp	r7, #120	; 0x78
 8003d4e:	4691      	mov	r9, r2
 8003d50:	4680      	mov	r8, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	469a      	mov	sl, r3
 8003d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d5a:	d807      	bhi.n	8003d6c <_printf_i+0x28>
 8003d5c:	2f62      	cmp	r7, #98	; 0x62
 8003d5e:	d80a      	bhi.n	8003d76 <_printf_i+0x32>
 8003d60:	2f00      	cmp	r7, #0
 8003d62:	f000 80d8 	beq.w	8003f16 <_printf_i+0x1d2>
 8003d66:	2f58      	cmp	r7, #88	; 0x58
 8003d68:	f000 80a3 	beq.w	8003eb2 <_printf_i+0x16e>
 8003d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d74:	e03a      	b.n	8003dec <_printf_i+0xa8>
 8003d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d7a:	2b15      	cmp	r3, #21
 8003d7c:	d8f6      	bhi.n	8003d6c <_printf_i+0x28>
 8003d7e:	a101      	add	r1, pc, #4	; (adr r1, 8003d84 <_printf_i+0x40>)
 8003d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d84:	08003ddd 	.word	0x08003ddd
 8003d88:	08003df1 	.word	0x08003df1
 8003d8c:	08003d6d 	.word	0x08003d6d
 8003d90:	08003d6d 	.word	0x08003d6d
 8003d94:	08003d6d 	.word	0x08003d6d
 8003d98:	08003d6d 	.word	0x08003d6d
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003d6d 	.word	0x08003d6d
 8003da4:	08003d6d 	.word	0x08003d6d
 8003da8:	08003d6d 	.word	0x08003d6d
 8003dac:	08003d6d 	.word	0x08003d6d
 8003db0:	08003efd 	.word	0x08003efd
 8003db4:	08003e21 	.word	0x08003e21
 8003db8:	08003edf 	.word	0x08003edf
 8003dbc:	08003d6d 	.word	0x08003d6d
 8003dc0:	08003d6d 	.word	0x08003d6d
 8003dc4:	08003f1f 	.word	0x08003f1f
 8003dc8:	08003d6d 	.word	0x08003d6d
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003d6d 	.word	0x08003d6d
 8003dd4:	08003d6d 	.word	0x08003d6d
 8003dd8:	08003ee7 	.word	0x08003ee7
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	1d1a      	adds	r2, r3, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	602a      	str	r2, [r5, #0]
 8003de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0a3      	b.n	8003f38 <_printf_i+0x1f4>
 8003df0:	6820      	ldr	r0, [r4, #0]
 8003df2:	6829      	ldr	r1, [r5, #0]
 8003df4:	0606      	lsls	r6, r0, #24
 8003df6:	f101 0304 	add.w	r3, r1, #4
 8003dfa:	d50a      	bpl.n	8003e12 <_printf_i+0xce>
 8003dfc:	680e      	ldr	r6, [r1, #0]
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	2e00      	cmp	r6, #0
 8003e02:	da03      	bge.n	8003e0c <_printf_i+0xc8>
 8003e04:	232d      	movs	r3, #45	; 0x2d
 8003e06:	4276      	negs	r6, r6
 8003e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0c:	485e      	ldr	r0, [pc, #376]	; (8003f88 <_printf_i+0x244>)
 8003e0e:	230a      	movs	r3, #10
 8003e10:	e019      	b.n	8003e46 <_printf_i+0x102>
 8003e12:	680e      	ldr	r6, [r1, #0]
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e1a:	bf18      	it	ne
 8003e1c:	b236      	sxthne	r6, r6
 8003e1e:	e7ef      	b.n	8003e00 <_printf_i+0xbc>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	1d19      	adds	r1, r3, #4
 8003e26:	6029      	str	r1, [r5, #0]
 8003e28:	0601      	lsls	r1, r0, #24
 8003e2a:	d501      	bpl.n	8003e30 <_printf_i+0xec>
 8003e2c:	681e      	ldr	r6, [r3, #0]
 8003e2e:	e002      	b.n	8003e36 <_printf_i+0xf2>
 8003e30:	0646      	lsls	r6, r0, #25
 8003e32:	d5fb      	bpl.n	8003e2c <_printf_i+0xe8>
 8003e34:	881e      	ldrh	r6, [r3, #0]
 8003e36:	4854      	ldr	r0, [pc, #336]	; (8003f88 <_printf_i+0x244>)
 8003e38:	2f6f      	cmp	r7, #111	; 0x6f
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2308      	moveq	r3, #8
 8003e3e:	230a      	movne	r3, #10
 8003e40:	2100      	movs	r1, #0
 8003e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e46:	6865      	ldr	r5, [r4, #4]
 8003e48:	60a5      	str	r5, [r4, #8]
 8003e4a:	2d00      	cmp	r5, #0
 8003e4c:	bfa2      	ittt	ge
 8003e4e:	6821      	ldrge	r1, [r4, #0]
 8003e50:	f021 0104 	bicge.w	r1, r1, #4
 8003e54:	6021      	strge	r1, [r4, #0]
 8003e56:	b90e      	cbnz	r6, 8003e5c <_printf_i+0x118>
 8003e58:	2d00      	cmp	r5, #0
 8003e5a:	d04d      	beq.n	8003ef8 <_printf_i+0x1b4>
 8003e5c:	4615      	mov	r5, r2
 8003e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e62:	fb03 6711 	mls	r7, r3, r1, r6
 8003e66:	5dc7      	ldrb	r7, [r0, r7]
 8003e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e6c:	4637      	mov	r7, r6
 8003e6e:	42bb      	cmp	r3, r7
 8003e70:	460e      	mov	r6, r1
 8003e72:	d9f4      	bls.n	8003e5e <_printf_i+0x11a>
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d10b      	bne.n	8003e90 <_printf_i+0x14c>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	07de      	lsls	r6, r3, #31
 8003e7c:	d508      	bpl.n	8003e90 <_printf_i+0x14c>
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	6861      	ldr	r1, [r4, #4]
 8003e82:	4299      	cmp	r1, r3
 8003e84:	bfde      	ittt	le
 8003e86:	2330      	movle	r3, #48	; 0x30
 8003e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e90:	1b52      	subs	r2, r2, r5
 8003e92:	6122      	str	r2, [r4, #16]
 8003e94:	f8cd a000 	str.w	sl, [sp]
 8003e98:	464b      	mov	r3, r9
 8003e9a:	aa03      	add	r2, sp, #12
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4640      	mov	r0, r8
 8003ea0:	f7ff fee2 	bl	8003c68 <_printf_common>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d14c      	bne.n	8003f42 <_printf_i+0x1fe>
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	b004      	add	sp, #16
 8003eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb2:	4835      	ldr	r0, [pc, #212]	; (8003f88 <_printf_i+0x244>)
 8003eb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003eb8:	6829      	ldr	r1, [r5, #0]
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ec0:	6029      	str	r1, [r5, #0]
 8003ec2:	061d      	lsls	r5, r3, #24
 8003ec4:	d514      	bpl.n	8003ef0 <_printf_i+0x1ac>
 8003ec6:	07df      	lsls	r7, r3, #31
 8003ec8:	bf44      	itt	mi
 8003eca:	f043 0320 	orrmi.w	r3, r3, #32
 8003ece:	6023      	strmi	r3, [r4, #0]
 8003ed0:	b91e      	cbnz	r6, 8003eda <_printf_i+0x196>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	f023 0320 	bic.w	r3, r3, #32
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	2310      	movs	r3, #16
 8003edc:	e7b0      	b.n	8003e40 <_printf_i+0xfc>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	f043 0320 	orr.w	r3, r3, #32
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	2378      	movs	r3, #120	; 0x78
 8003ee8:	4828      	ldr	r0, [pc, #160]	; (8003f8c <_printf_i+0x248>)
 8003eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eee:	e7e3      	b.n	8003eb8 <_printf_i+0x174>
 8003ef0:	0659      	lsls	r1, r3, #25
 8003ef2:	bf48      	it	mi
 8003ef4:	b2b6      	uxthmi	r6, r6
 8003ef6:	e7e6      	b.n	8003ec6 <_printf_i+0x182>
 8003ef8:	4615      	mov	r5, r2
 8003efa:	e7bb      	b.n	8003e74 <_printf_i+0x130>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	6826      	ldr	r6, [r4, #0]
 8003f00:	6961      	ldr	r1, [r4, #20]
 8003f02:	1d18      	adds	r0, r3, #4
 8003f04:	6028      	str	r0, [r5, #0]
 8003f06:	0635      	lsls	r5, r6, #24
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	d501      	bpl.n	8003f10 <_printf_i+0x1cc>
 8003f0c:	6019      	str	r1, [r3, #0]
 8003f0e:	e002      	b.n	8003f16 <_printf_i+0x1d2>
 8003f10:	0670      	lsls	r0, r6, #25
 8003f12:	d5fb      	bpl.n	8003f0c <_printf_i+0x1c8>
 8003f14:	8019      	strh	r1, [r3, #0]
 8003f16:	2300      	movs	r3, #0
 8003f18:	6123      	str	r3, [r4, #16]
 8003f1a:	4615      	mov	r5, r2
 8003f1c:	e7ba      	b.n	8003e94 <_printf_i+0x150>
 8003f1e:	682b      	ldr	r3, [r5, #0]
 8003f20:	1d1a      	adds	r2, r3, #4
 8003f22:	602a      	str	r2, [r5, #0]
 8003f24:	681d      	ldr	r5, [r3, #0]
 8003f26:	6862      	ldr	r2, [r4, #4]
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f7fc f958 	bl	80001e0 <memchr>
 8003f30:	b108      	cbz	r0, 8003f36 <_printf_i+0x1f2>
 8003f32:	1b40      	subs	r0, r0, r5
 8003f34:	6060      	str	r0, [r4, #4]
 8003f36:	6863      	ldr	r3, [r4, #4]
 8003f38:	6123      	str	r3, [r4, #16]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f40:	e7a8      	b.n	8003e94 <_printf_i+0x150>
 8003f42:	6923      	ldr	r3, [r4, #16]
 8003f44:	462a      	mov	r2, r5
 8003f46:	4649      	mov	r1, r9
 8003f48:	4640      	mov	r0, r8
 8003f4a:	47d0      	blx	sl
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d0ab      	beq.n	8003ea8 <_printf_i+0x164>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	079b      	lsls	r3, r3, #30
 8003f54:	d413      	bmi.n	8003f7e <_printf_i+0x23a>
 8003f56:	68e0      	ldr	r0, [r4, #12]
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	4298      	cmp	r0, r3
 8003f5c:	bfb8      	it	lt
 8003f5e:	4618      	movlt	r0, r3
 8003f60:	e7a4      	b.n	8003eac <_printf_i+0x168>
 8003f62:	2301      	movs	r3, #1
 8003f64:	4632      	mov	r2, r6
 8003f66:	4649      	mov	r1, r9
 8003f68:	4640      	mov	r0, r8
 8003f6a:	47d0      	blx	sl
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d09b      	beq.n	8003ea8 <_printf_i+0x164>
 8003f70:	3501      	adds	r5, #1
 8003f72:	68e3      	ldr	r3, [r4, #12]
 8003f74:	9903      	ldr	r1, [sp, #12]
 8003f76:	1a5b      	subs	r3, r3, r1
 8003f78:	42ab      	cmp	r3, r5
 8003f7a:	dcf2      	bgt.n	8003f62 <_printf_i+0x21e>
 8003f7c:	e7eb      	b.n	8003f56 <_printf_i+0x212>
 8003f7e:	2500      	movs	r5, #0
 8003f80:	f104 0619 	add.w	r6, r4, #25
 8003f84:	e7f5      	b.n	8003f72 <_printf_i+0x22e>
 8003f86:	bf00      	nop
 8003f88:	080046a9 	.word	0x080046a9
 8003f8c:	080046ba 	.word	0x080046ba

08003f90 <memcpy>:
 8003f90:	440a      	add	r2, r1
 8003f92:	4291      	cmp	r1, r2
 8003f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f98:	d100      	bne.n	8003f9c <memcpy+0xc>
 8003f9a:	4770      	bx	lr
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fa6:	4291      	cmp	r1, r2
 8003fa8:	d1f9      	bne.n	8003f9e <memcpy+0xe>
 8003faa:	bd10      	pop	{r4, pc}

08003fac <memmove>:
 8003fac:	4288      	cmp	r0, r1
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	eb01 0402 	add.w	r4, r1, r2
 8003fb4:	d902      	bls.n	8003fbc <memmove+0x10>
 8003fb6:	4284      	cmp	r4, r0
 8003fb8:	4623      	mov	r3, r4
 8003fba:	d807      	bhi.n	8003fcc <memmove+0x20>
 8003fbc:	1e43      	subs	r3, r0, #1
 8003fbe:	42a1      	cmp	r1, r4
 8003fc0:	d008      	beq.n	8003fd4 <memmove+0x28>
 8003fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fca:	e7f8      	b.n	8003fbe <memmove+0x12>
 8003fcc:	4402      	add	r2, r0
 8003fce:	4601      	mov	r1, r0
 8003fd0:	428a      	cmp	r2, r1
 8003fd2:	d100      	bne.n	8003fd6 <memmove+0x2a>
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fde:	e7f7      	b.n	8003fd0 <memmove+0x24>

08003fe0 <_free_r>:
 8003fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fe2:	2900      	cmp	r1, #0
 8003fe4:	d044      	beq.n	8004070 <_free_r+0x90>
 8003fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fea:	9001      	str	r0, [sp, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f1a1 0404 	sub.w	r4, r1, #4
 8003ff2:	bfb8      	it	lt
 8003ff4:	18e4      	addlt	r4, r4, r3
 8003ff6:	f000 f913 	bl	8004220 <__malloc_lock>
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <_free_r+0x94>)
 8003ffc:	9801      	ldr	r0, [sp, #4]
 8003ffe:	6813      	ldr	r3, [r2, #0]
 8004000:	b933      	cbnz	r3, 8004010 <_free_r+0x30>
 8004002:	6063      	str	r3, [r4, #4]
 8004004:	6014      	str	r4, [r2, #0]
 8004006:	b003      	add	sp, #12
 8004008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800400c:	f000 b90e 	b.w	800422c <__malloc_unlock>
 8004010:	42a3      	cmp	r3, r4
 8004012:	d908      	bls.n	8004026 <_free_r+0x46>
 8004014:	6825      	ldr	r5, [r4, #0]
 8004016:	1961      	adds	r1, r4, r5
 8004018:	428b      	cmp	r3, r1
 800401a:	bf01      	itttt	eq
 800401c:	6819      	ldreq	r1, [r3, #0]
 800401e:	685b      	ldreq	r3, [r3, #4]
 8004020:	1949      	addeq	r1, r1, r5
 8004022:	6021      	streq	r1, [r4, #0]
 8004024:	e7ed      	b.n	8004002 <_free_r+0x22>
 8004026:	461a      	mov	r2, r3
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	b10b      	cbz	r3, 8004030 <_free_r+0x50>
 800402c:	42a3      	cmp	r3, r4
 800402e:	d9fa      	bls.n	8004026 <_free_r+0x46>
 8004030:	6811      	ldr	r1, [r2, #0]
 8004032:	1855      	adds	r5, r2, r1
 8004034:	42a5      	cmp	r5, r4
 8004036:	d10b      	bne.n	8004050 <_free_r+0x70>
 8004038:	6824      	ldr	r4, [r4, #0]
 800403a:	4421      	add	r1, r4
 800403c:	1854      	adds	r4, r2, r1
 800403e:	42a3      	cmp	r3, r4
 8004040:	6011      	str	r1, [r2, #0]
 8004042:	d1e0      	bne.n	8004006 <_free_r+0x26>
 8004044:	681c      	ldr	r4, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	6053      	str	r3, [r2, #4]
 800404a:	4421      	add	r1, r4
 800404c:	6011      	str	r1, [r2, #0]
 800404e:	e7da      	b.n	8004006 <_free_r+0x26>
 8004050:	d902      	bls.n	8004058 <_free_r+0x78>
 8004052:	230c      	movs	r3, #12
 8004054:	6003      	str	r3, [r0, #0]
 8004056:	e7d6      	b.n	8004006 <_free_r+0x26>
 8004058:	6825      	ldr	r5, [r4, #0]
 800405a:	1961      	adds	r1, r4, r5
 800405c:	428b      	cmp	r3, r1
 800405e:	bf04      	itt	eq
 8004060:	6819      	ldreq	r1, [r3, #0]
 8004062:	685b      	ldreq	r3, [r3, #4]
 8004064:	6063      	str	r3, [r4, #4]
 8004066:	bf04      	itt	eq
 8004068:	1949      	addeq	r1, r1, r5
 800406a:	6021      	streq	r1, [r4, #0]
 800406c:	6054      	str	r4, [r2, #4]
 800406e:	e7ca      	b.n	8004006 <_free_r+0x26>
 8004070:	b003      	add	sp, #12
 8004072:	bd30      	pop	{r4, r5, pc}
 8004074:	20000250 	.word	0x20000250

08004078 <sbrk_aligned>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	4e0e      	ldr	r6, [pc, #56]	; (80040b4 <sbrk_aligned+0x3c>)
 800407c:	460c      	mov	r4, r1
 800407e:	6831      	ldr	r1, [r6, #0]
 8004080:	4605      	mov	r5, r0
 8004082:	b911      	cbnz	r1, 800408a <sbrk_aligned+0x12>
 8004084:	f000 f8bc 	bl	8004200 <_sbrk_r>
 8004088:	6030      	str	r0, [r6, #0]
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f000 f8b7 	bl	8004200 <_sbrk_r>
 8004092:	1c43      	adds	r3, r0, #1
 8004094:	d00a      	beq.n	80040ac <sbrk_aligned+0x34>
 8004096:	1cc4      	adds	r4, r0, #3
 8004098:	f024 0403 	bic.w	r4, r4, #3
 800409c:	42a0      	cmp	r0, r4
 800409e:	d007      	beq.n	80040b0 <sbrk_aligned+0x38>
 80040a0:	1a21      	subs	r1, r4, r0
 80040a2:	4628      	mov	r0, r5
 80040a4:	f000 f8ac 	bl	8004200 <_sbrk_r>
 80040a8:	3001      	adds	r0, #1
 80040aa:	d101      	bne.n	80040b0 <sbrk_aligned+0x38>
 80040ac:	f04f 34ff 	mov.w	r4, #4294967295
 80040b0:	4620      	mov	r0, r4
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	20000254 	.word	0x20000254

080040b8 <_malloc_r>:
 80040b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040bc:	1ccd      	adds	r5, r1, #3
 80040be:	f025 0503 	bic.w	r5, r5, #3
 80040c2:	3508      	adds	r5, #8
 80040c4:	2d0c      	cmp	r5, #12
 80040c6:	bf38      	it	cc
 80040c8:	250c      	movcc	r5, #12
 80040ca:	2d00      	cmp	r5, #0
 80040cc:	4607      	mov	r7, r0
 80040ce:	db01      	blt.n	80040d4 <_malloc_r+0x1c>
 80040d0:	42a9      	cmp	r1, r5
 80040d2:	d905      	bls.n	80040e0 <_malloc_r+0x28>
 80040d4:	230c      	movs	r3, #12
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	2600      	movs	r6, #0
 80040da:	4630      	mov	r0, r6
 80040dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e0:	4e2e      	ldr	r6, [pc, #184]	; (800419c <_malloc_r+0xe4>)
 80040e2:	f000 f89d 	bl	8004220 <__malloc_lock>
 80040e6:	6833      	ldr	r3, [r6, #0]
 80040e8:	461c      	mov	r4, r3
 80040ea:	bb34      	cbnz	r4, 800413a <_malloc_r+0x82>
 80040ec:	4629      	mov	r1, r5
 80040ee:	4638      	mov	r0, r7
 80040f0:	f7ff ffc2 	bl	8004078 <sbrk_aligned>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	4604      	mov	r4, r0
 80040f8:	d14d      	bne.n	8004196 <_malloc_r+0xde>
 80040fa:	6834      	ldr	r4, [r6, #0]
 80040fc:	4626      	mov	r6, r4
 80040fe:	2e00      	cmp	r6, #0
 8004100:	d140      	bne.n	8004184 <_malloc_r+0xcc>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	4631      	mov	r1, r6
 8004106:	4638      	mov	r0, r7
 8004108:	eb04 0803 	add.w	r8, r4, r3
 800410c:	f000 f878 	bl	8004200 <_sbrk_r>
 8004110:	4580      	cmp	r8, r0
 8004112:	d13a      	bne.n	800418a <_malloc_r+0xd2>
 8004114:	6821      	ldr	r1, [r4, #0]
 8004116:	3503      	adds	r5, #3
 8004118:	1a6d      	subs	r5, r5, r1
 800411a:	f025 0503 	bic.w	r5, r5, #3
 800411e:	3508      	adds	r5, #8
 8004120:	2d0c      	cmp	r5, #12
 8004122:	bf38      	it	cc
 8004124:	250c      	movcc	r5, #12
 8004126:	4629      	mov	r1, r5
 8004128:	4638      	mov	r0, r7
 800412a:	f7ff ffa5 	bl	8004078 <sbrk_aligned>
 800412e:	3001      	adds	r0, #1
 8004130:	d02b      	beq.n	800418a <_malloc_r+0xd2>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	442b      	add	r3, r5
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	e00e      	b.n	8004158 <_malloc_r+0xa0>
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	1b52      	subs	r2, r2, r5
 800413e:	d41e      	bmi.n	800417e <_malloc_r+0xc6>
 8004140:	2a0b      	cmp	r2, #11
 8004142:	d916      	bls.n	8004172 <_malloc_r+0xba>
 8004144:	1961      	adds	r1, r4, r5
 8004146:	42a3      	cmp	r3, r4
 8004148:	6025      	str	r5, [r4, #0]
 800414a:	bf18      	it	ne
 800414c:	6059      	strne	r1, [r3, #4]
 800414e:	6863      	ldr	r3, [r4, #4]
 8004150:	bf08      	it	eq
 8004152:	6031      	streq	r1, [r6, #0]
 8004154:	5162      	str	r2, [r4, r5]
 8004156:	604b      	str	r3, [r1, #4]
 8004158:	4638      	mov	r0, r7
 800415a:	f104 060b 	add.w	r6, r4, #11
 800415e:	f000 f865 	bl	800422c <__malloc_unlock>
 8004162:	f026 0607 	bic.w	r6, r6, #7
 8004166:	1d23      	adds	r3, r4, #4
 8004168:	1af2      	subs	r2, r6, r3
 800416a:	d0b6      	beq.n	80040da <_malloc_r+0x22>
 800416c:	1b9b      	subs	r3, r3, r6
 800416e:	50a3      	str	r3, [r4, r2]
 8004170:	e7b3      	b.n	80040da <_malloc_r+0x22>
 8004172:	6862      	ldr	r2, [r4, #4]
 8004174:	42a3      	cmp	r3, r4
 8004176:	bf0c      	ite	eq
 8004178:	6032      	streq	r2, [r6, #0]
 800417a:	605a      	strne	r2, [r3, #4]
 800417c:	e7ec      	b.n	8004158 <_malloc_r+0xa0>
 800417e:	4623      	mov	r3, r4
 8004180:	6864      	ldr	r4, [r4, #4]
 8004182:	e7b2      	b.n	80040ea <_malloc_r+0x32>
 8004184:	4634      	mov	r4, r6
 8004186:	6876      	ldr	r6, [r6, #4]
 8004188:	e7b9      	b.n	80040fe <_malloc_r+0x46>
 800418a:	230c      	movs	r3, #12
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4638      	mov	r0, r7
 8004190:	f000 f84c 	bl	800422c <__malloc_unlock>
 8004194:	e7a1      	b.n	80040da <_malloc_r+0x22>
 8004196:	6025      	str	r5, [r4, #0]
 8004198:	e7de      	b.n	8004158 <_malloc_r+0xa0>
 800419a:	bf00      	nop
 800419c:	20000250 	.word	0x20000250

080041a0 <_realloc_r>:
 80041a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a4:	4680      	mov	r8, r0
 80041a6:	4614      	mov	r4, r2
 80041a8:	460e      	mov	r6, r1
 80041aa:	b921      	cbnz	r1, 80041b6 <_realloc_r+0x16>
 80041ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b0:	4611      	mov	r1, r2
 80041b2:	f7ff bf81 	b.w	80040b8 <_malloc_r>
 80041b6:	b92a      	cbnz	r2, 80041c4 <_realloc_r+0x24>
 80041b8:	f7ff ff12 	bl	8003fe0 <_free_r>
 80041bc:	4625      	mov	r5, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c4:	f000 f838 	bl	8004238 <_malloc_usable_size_r>
 80041c8:	4284      	cmp	r4, r0
 80041ca:	4607      	mov	r7, r0
 80041cc:	d802      	bhi.n	80041d4 <_realloc_r+0x34>
 80041ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041d2:	d812      	bhi.n	80041fa <_realloc_r+0x5a>
 80041d4:	4621      	mov	r1, r4
 80041d6:	4640      	mov	r0, r8
 80041d8:	f7ff ff6e 	bl	80040b8 <_malloc_r>
 80041dc:	4605      	mov	r5, r0
 80041de:	2800      	cmp	r0, #0
 80041e0:	d0ed      	beq.n	80041be <_realloc_r+0x1e>
 80041e2:	42bc      	cmp	r4, r7
 80041e4:	4622      	mov	r2, r4
 80041e6:	4631      	mov	r1, r6
 80041e8:	bf28      	it	cs
 80041ea:	463a      	movcs	r2, r7
 80041ec:	f7ff fed0 	bl	8003f90 <memcpy>
 80041f0:	4631      	mov	r1, r6
 80041f2:	4640      	mov	r0, r8
 80041f4:	f7ff fef4 	bl	8003fe0 <_free_r>
 80041f8:	e7e1      	b.n	80041be <_realloc_r+0x1e>
 80041fa:	4635      	mov	r5, r6
 80041fc:	e7df      	b.n	80041be <_realloc_r+0x1e>
	...

08004200 <_sbrk_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	4d06      	ldr	r5, [pc, #24]	; (800421c <_sbrk_r+0x1c>)
 8004204:	2300      	movs	r3, #0
 8004206:	4604      	mov	r4, r0
 8004208:	4608      	mov	r0, r1
 800420a:	602b      	str	r3, [r5, #0]
 800420c:	f7fd f8ac 	bl	8001368 <_sbrk>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_sbrk_r+0x1a>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_sbrk_r+0x1a>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	20000258 	.word	0x20000258

08004220 <__malloc_lock>:
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <__malloc_lock+0x8>)
 8004222:	f000 b811 	b.w	8004248 <__retarget_lock_acquire_recursive>
 8004226:	bf00      	nop
 8004228:	2000025c 	.word	0x2000025c

0800422c <__malloc_unlock>:
 800422c:	4801      	ldr	r0, [pc, #4]	; (8004234 <__malloc_unlock+0x8>)
 800422e:	f000 b80c 	b.w	800424a <__retarget_lock_release_recursive>
 8004232:	bf00      	nop
 8004234:	2000025c 	.word	0x2000025c

08004238 <_malloc_usable_size_r>:
 8004238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800423c:	1f18      	subs	r0, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	bfbc      	itt	lt
 8004242:	580b      	ldrlt	r3, [r1, r0]
 8004244:	18c0      	addlt	r0, r0, r3
 8004246:	4770      	bx	lr

08004248 <__retarget_lock_acquire_recursive>:
 8004248:	4770      	bx	lr

0800424a <__retarget_lock_release_recursive>:
 800424a:	4770      	bx	lr

0800424c <_init>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr

08004258 <_fini>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	bf00      	nop
 800425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425e:	bc08      	pop	{r3}
 8004260:	469e      	mov	lr, r3
 8004262:	4770      	bx	lr
